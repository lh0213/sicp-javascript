<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SicpTextbookRails</title>
    <meta name="csrf-param" content="authenticity_token" />
<meta name="csrf-token" content="FuKgoQV4RFBQYSrcWUzjgFLkWNIzSvf3YWlUBD4o/fjqaPAoGTtFSPZKuOjNm2lKtAwwhA2sk5MgHWS+fyzUFg==" />

    <!--<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">
    -->
    <link href="https://fonts.googleapis.com/css?family=Droid+Sans|Droid+Sans+Mono|Droid+Serif" rel="stylesheet">
    <link rel="stylesheet" media="all" href="../assets/application-4afa0dc75ea8a2ff925eb41df709aa5f5fae6640df639d9b6ae50ed06be5a5d2.css" />

    <link rel="shortcut icon" type="image/x-icon" href="../assets/favicon-5cc7f923fb946d60fe9552847f4b6edd0f8cf2f122d6f3fef39d59ce84d47942.ico" />

    <script src="https://code.jquery.com/jquery-3.2.1.min.js"
			  integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
	          crossorigin="anonymous">
    </script>
    <script src="http://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>
    <script type="text/javascript" async
        src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML">
    </script>

    <script src="../assets/application-e1d34c17f2d1680f21b650089aea08e3ecfe292f1157f2d23bfa7d4d9d530c8b.js"></script>

    <!-- Rendering inline LaTeX -->
    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({
        tex2jax: {
          inlineMath: [ ['$','$'], ["\\(","\\)"] ],
          processEscapes: true,
          jax: ["input/TeX","output/HTML-CSS"]
        }
      });
    </script>
    <!--<script src="/mathjax/MathJax.js?config=TeX-AMS_HTML-full.js" type="text/javascript"></script>-->
    <!-- Le HTML5 shim, for IE6-8 support of HTML elements -->
    <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.2/html5shiv.min.js" type="text/javascript"></script>
    <![endif]-->
  </head>
  <body>

     <nav class="navbar navbar-toggleable-md navbar-inverse bg-inverse fixed-top">
      <button class="navbar-toggler collapsed" type="button" data-toggle="collapse" data-target="#nav-sidebar" aria-controls="nav-sidebar" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
       <a class="navbar-brand navbar-brand-short" href="../chapters">CS1101S: SICP</a>
       <a class="navbar-brand navbar-brand-long" href="../chapters">CS1101S: Structure and Interpretation
          of Computer Programs</a>

       <div class="collapse navbar-collapse" id="navbarsExampleDefault">
         <form id="search" class="form-inline my-2 my-lg-0">
           <input id="search-box" class="form-control mr-sm-2" type="text" placeholder="Search">
           <div id="search-button" class="btn btn-outline-success my-2 my-sm-0">Search</div>

           <script>
               (function() {
                var cx = "002429487986305006822:ztnrbwx01qy";
                var gcse = document.createElement('script');
                gcse.type = 'text/javascript';
                gcse.async = true;
                gcse.src = 'https://cse.google.com/cse.js?cx=' + cx;
                var s = document.getElementsByTagName('script')[0];
                s.parentNode.insertBefore(gcse, s);
               })();
            </script>
            <gcse:search></gcse:search>
         </form>
       </div>
     </nav>

     <div class="container scroll">

          <div class="collapse" id="nav-sidebar" role="tablist" aria-multiselectable="true">
                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-122">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-122" aria-expanded="false" aria-controls="sidebar-collapse-122">
                    <a href="122">About</a>
                  </a>
                </h5>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-123">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-123" aria-expanded="false" aria-controls="sidebar-collapse-123">
                    <a href="123">References</a>
                  </a>
                </h5>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-124">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-124" aria-expanded="false" aria-controls="sidebar-collapse-124">
                    <a href="124">Webpreface</a>
                  </a>
                </h5>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-1">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-1" aria-expanded="true" aria-controls="sidebar-collapse-1">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-1" aria-expanded="true" aria-controls="sidebar-collapse-1">
                    -
                  </a>
                    <a href="1">1.       Building Abstractions with       Functions    </a>
                </h5>
              </div>
              <div id="sidebar-collapse-1" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-2">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-2" aria-expanded="true" aria-controls="sidebar-collapse-2">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-2" aria-expanded="true" aria-controls="sidebar-collapse-2">
                    -
                  </a>
                    <a href="2">1. The Elements of Programming</a>
                </h5>
              </div>
              <div id="sidebar-collapse-2" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-3">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-3" aria-expanded="false" aria-controls="sidebar-collapse-3">
                    <a href="3">1. Expressions</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-4">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-4" aria-expanded="false" aria-controls="sidebar-collapse-4">
                    <a href="4">2. Naming and the Environment</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-5">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-5" aria-expanded="false" aria-controls="sidebar-collapse-5">
                    <a href="5">3.           Evaluating          Operator Combinations                  </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-6">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-6" aria-expanded="false" aria-controls="sidebar-collapse-6">
                    <a href="6">4.           Functions        </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-7">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-7" aria-expanded="false" aria-controls="sidebar-collapse-7">
                    <a href="7">5.           The Substitution Model for                                                 Function                              Application        </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-8">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-8" aria-expanded="false" aria-controls="sidebar-collapse-8">
                    <a href="8">6.           Conditional                                           Statements                              and Predicates        </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-9">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-9" aria-expanded="false" aria-controls="sidebar-collapse-9">
                    <a href="9">7. Example: Square Roots by Newtons Method</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-10">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-10" aria-expanded="false" aria-controls="sidebar-collapse-10">
                    <a href="10">8.                                                 Functions                                as Black-Box Abstractions        </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-11">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-11" aria-expanded="true" aria-controls="sidebar-collapse-11">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-11" aria-expanded="true" aria-controls="sidebar-collapse-11">
                    -
                  </a>
                    <a href="11">2.             Functions            and the Processes They Generate      </a>
                </h5>
              </div>
              <div id="sidebar-collapse-11" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-12">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-12" aria-expanded="false" aria-controls="sidebar-collapse-12">
                    <a href="12">1. Linear Recursion and Iteration</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-13">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-13" aria-expanded="false" aria-controls="sidebar-collapse-13">
                    <a href="13">2. Tree Recursion</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-14">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-14" aria-expanded="false" aria-controls="sidebar-collapse-14">
                    <a href="14">3. Orders of Growth</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-15">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-15" aria-expanded="false" aria-controls="sidebar-collapse-15">
                    <a href="15">4. Exponentiation</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-16">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-16" aria-expanded="false" aria-controls="sidebar-collapse-16">
                    <a href="16">5. Greatest Common Divisors</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-17">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-17" aria-expanded="false" aria-controls="sidebar-collapse-17">
                    <a href="17">6. Example: Testing for Primality</a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-18">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-18" aria-expanded="true" aria-controls="sidebar-collapse-18">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-18" aria-expanded="true" aria-controls="sidebar-collapse-18">
                    -
                  </a>
                    <a href="18">3.         Formulating Abstractions with Higher-Order         Functions      </a>
                </h5>
              </div>
              <div id="sidebar-collapse-18" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-19">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-18" href="#sidebar-collapse-19" aria-expanded="false" aria-controls="sidebar-collapse-19">
                    <a href="19">1.           Functions          as Arguments        </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-20">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-18" href="#sidebar-collapse-20" aria-expanded="false" aria-controls="sidebar-collapse-20">
                    <a href="20">2.           Function Definition Expressions          </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-21">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-18" href="#sidebar-collapse-21" aria-expanded="false" aria-controls="sidebar-collapse-21">
                    <a href="21">3.             Functions            as General Methods          </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-22">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-18" href="#sidebar-collapse-22" aria-expanded="false" aria-controls="sidebar-collapse-22">
                    <a href="22">4.               Functions              as Returned Values            </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-23">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-23" aria-expanded="true" aria-controls="sidebar-collapse-23">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-23" aria-expanded="true" aria-controls="sidebar-collapse-23">
                    -
                  </a>
                    <a href="23">2. Building Abstractions with Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-23" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-24">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-24" aria-expanded="true" aria-controls="sidebar-collapse-24">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-24" aria-expanded="true" aria-controls="sidebar-collapse-24">
                    -
                  </a>
                    <a href="24">1. Introduction to Data Abstraction</a>
                </h5>
              </div>
              <div id="sidebar-collapse-24" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-25">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-24" href="#sidebar-collapse-25" aria-expanded="false" aria-controls="sidebar-collapse-25">
                    <a href="25">1.         Example: Arithmetic Operations for Rational Numbers      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-26">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-24" href="#sidebar-collapse-26" aria-expanded="false" aria-controls="sidebar-collapse-26">
                    <a href="26">2.         Abstraction Barriers      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-27">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-24" href="#sidebar-collapse-27" aria-expanded="false" aria-controls="sidebar-collapse-27">
                    <a href="27">3.         What Is Meant by Data?      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-28">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-24" href="#sidebar-collapse-28" aria-expanded="false" aria-controls="sidebar-collapse-28">
                    <a href="28">4.         Extended Exercise: Interval Arithmetic      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-29">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-29" aria-expanded="true" aria-controls="sidebar-collapse-29">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-29" aria-expanded="true" aria-controls="sidebar-collapse-29">
                    -
                  </a>
                    <a href="29">2. Hierarchical Data and the Closure Property</a>
                </h5>
              </div>
              <div id="sidebar-collapse-29" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-30">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-29" href="#sidebar-collapse-30" aria-expanded="false" aria-controls="sidebar-collapse-30">
                    <a href="30">1.         Representing Sequences      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-31">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-29" href="#sidebar-collapse-31" aria-expanded="false" aria-controls="sidebar-collapse-31">
                    <a href="31">2.         Hierarchical Structures      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-32">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-29" href="#sidebar-collapse-32" aria-expanded="false" aria-controls="sidebar-collapse-32">
                    <a href="32">3.         Sequences as Conventional Interfaces      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-33">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-29" href="#sidebar-collapse-33" aria-expanded="false" aria-controls="sidebar-collapse-33">
                    <a href="33">4.         Example: A Picture Language      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-34">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-34" aria-expanded="true" aria-controls="sidebar-collapse-34">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-34" aria-expanded="true" aria-controls="sidebar-collapse-34">
                    -
                  </a>
                    <a href="34">3. Symbolic Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-34" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-35">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-34" href="#sidebar-collapse-35" aria-expanded="false" aria-controls="sidebar-collapse-35">
                    <a href="35">1.         Strings      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-36">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-34" href="#sidebar-collapse-36" aria-expanded="false" aria-controls="sidebar-collapse-36">
                    <a href="36">2.         Example: Symbolic Differentiation      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-37">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-34" href="#sidebar-collapse-37" aria-expanded="false" aria-controls="sidebar-collapse-37">
                    <a href="37">3.         Example: Representing Sets      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-38">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-34" href="#sidebar-collapse-38" aria-expanded="false" aria-controls="sidebar-collapse-38">
                    <a href="38">4.         Example: Huffman Encoding Trees      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-39">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-39" aria-expanded="true" aria-controls="sidebar-collapse-39">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-39" aria-expanded="true" aria-controls="sidebar-collapse-39">
                    -
                  </a>
                    <a href="39">4. Multiple Representations for Abstract Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-39" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-40">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-39" href="#sidebar-collapse-40" aria-expanded="false" aria-controls="sidebar-collapse-40">
                    <a href="40">1.         Representations for Complex Numbers      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-41">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-39" href="#sidebar-collapse-41" aria-expanded="false" aria-controls="sidebar-collapse-41">
                    <a href="41">2.         Tagged data      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-42">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-39" href="#sidebar-collapse-42" aria-expanded="false" aria-controls="sidebar-collapse-42">
                    <a href="42">3.         Data-Directed Programming and Additivity      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-43">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-43" aria-expanded="true" aria-controls="sidebar-collapse-43">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-43" aria-expanded="true" aria-controls="sidebar-collapse-43">
                    -
                  </a>
                    <a href="43">5. Systems with Generic Operations</a>
                </h5>
              </div>
              <div id="sidebar-collapse-43" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-44">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-43" href="#sidebar-collapse-44" aria-expanded="false" aria-controls="sidebar-collapse-44">
                    <a href="44">1.         Generic Arithmetic Operations      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-45">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-43" href="#sidebar-collapse-45" aria-expanded="false" aria-controls="sidebar-collapse-45">
                    <a href="45">2.         Combining Data of Different Types      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-46">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-43" href="#sidebar-collapse-46" aria-expanded="false" aria-controls="sidebar-collapse-46">
                    <a href="46">3.         Example: Symbolic Algebra      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-47">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-47" aria-expanded="true" aria-controls="sidebar-collapse-47">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-47" aria-expanded="true" aria-controls="sidebar-collapse-47">
                    -
                  </a>
                    <a href="47">3. Modularity, Objects, and State</a>
                </h5>
              </div>
              <div id="sidebar-collapse-47" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-48">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-48" aria-expanded="true" aria-controls="sidebar-collapse-48">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-48" aria-expanded="true" aria-controls="sidebar-collapse-48">
                    -
                  </a>
                    <a href="48">1. Assignment and Local State</a>
                </h5>
              </div>
              <div id="sidebar-collapse-48" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-49">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-48" href="#sidebar-collapse-49" aria-expanded="false" aria-controls="sidebar-collapse-49">
                    <a href="49">1.         Local State Variables      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-50">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-48" href="#sidebar-collapse-50" aria-expanded="false" aria-controls="sidebar-collapse-50">
                    <a href="50">2.         The Benefits of Introducing Assignment      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-51">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-48" href="#sidebar-collapse-51" aria-expanded="false" aria-controls="sidebar-collapse-51">
                    <a href="51">3.         The Costs of Introducing Assignment      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-52">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-52" aria-expanded="true" aria-controls="sidebar-collapse-52">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-52" aria-expanded="true" aria-controls="sidebar-collapse-52">
                    -
                  </a>
                    <a href="52">2. The Environment Model of Evaluation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-52" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-53">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-52" href="#sidebar-collapse-53" aria-expanded="false" aria-controls="sidebar-collapse-53">
                    <a href="53">1.         The Rules for Evaluation      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-54">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-52" href="#sidebar-collapse-54" aria-expanded="false" aria-controls="sidebar-collapse-54">
                    <a href="54">2.         Applying Simple        Functions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-55">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-52" href="#sidebar-collapse-55" aria-expanded="false" aria-controls="sidebar-collapse-55">
                    <a href="55">3.         Frames as the Repository of Local State      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-56">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-52" href="#sidebar-collapse-56" aria-expanded="false" aria-controls="sidebar-collapse-56">
                    <a href="56">4.         Internal Definitions      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-57">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-57" aria-expanded="true" aria-controls="sidebar-collapse-57">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-57" aria-expanded="true" aria-controls="sidebar-collapse-57">
                    -
                  </a>
                    <a href="57">3. Modeling with Mutable Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-57" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-58">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-57" href="#sidebar-collapse-58" aria-expanded="false" aria-controls="sidebar-collapse-58">
                    <a href="58">1.         Mutable List Structure      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-59">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-57" href="#sidebar-collapse-59" aria-expanded="false" aria-controls="sidebar-collapse-59">
                    <a href="59">2.         Representing Queues      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-60">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-57" href="#sidebar-collapse-60" aria-expanded="false" aria-controls="sidebar-collapse-60">
                    <a href="60">3.         Representing Tables      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-61">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-57" href="#sidebar-collapse-61" aria-expanded="false" aria-controls="sidebar-collapse-61">
                    <a href="61">4.         A Simulator for Digital Circuits      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-62">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-57" href="#sidebar-collapse-62" aria-expanded="false" aria-controls="sidebar-collapse-62">
                    <a href="62">5.         Propagation of Constraints      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-63">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-63" aria-expanded="true" aria-controls="sidebar-collapse-63">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-63" aria-expanded="true" aria-controls="sidebar-collapse-63">
                    -
                  </a>
                    <a href="63">4. Concurrency: Time Is of the Essence</a>
                </h5>
              </div>
              <div id="sidebar-collapse-63" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-64">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-63" href="#sidebar-collapse-64" aria-expanded="false" aria-controls="sidebar-collapse-64">
                    <a href="64">1.         The Nature of Time in Concurrent Systems      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-65">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-63" href="#sidebar-collapse-65" aria-expanded="false" aria-controls="sidebar-collapse-65">
                    <a href="65">2.         Mechanisms for Controlling Concurrency      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-66">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-66" aria-expanded="true" aria-controls="sidebar-collapse-66">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-66" aria-expanded="true" aria-controls="sidebar-collapse-66">
                    -
                  </a>
                    <a href="66">5. Streams</a>
                </h5>
              </div>
              <div id="sidebar-collapse-66" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-67">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-66" href="#sidebar-collapse-67" aria-expanded="false" aria-controls="sidebar-collapse-67">
                    <a href="67">1.         Streams Are Delayed Lists      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-68">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-66" href="#sidebar-collapse-68" aria-expanded="false" aria-controls="sidebar-collapse-68">
                    <a href="68">2.         Infinite Streams      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-69">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-66" href="#sidebar-collapse-69" aria-expanded="false" aria-controls="sidebar-collapse-69">
                    <a href="69">3.   Exploiting the Stream Paradigm      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-70">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-66" href="#sidebar-collapse-70" aria-expanded="false" aria-controls="sidebar-collapse-70">
                    <a href="70">4.   Streams and Delayed Evaluation      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-71">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-66" href="#sidebar-collapse-71" aria-expanded="false" aria-controls="sidebar-collapse-71">
                    <a href="71">5.   Modularity of Functional Programs and Modularity of Objects      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-72">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-72" aria-expanded="true" aria-controls="sidebar-collapse-72">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-72" aria-expanded="true" aria-controls="sidebar-collapse-72">
                    -
                  </a>
                    <a href="72">4. Metalinguistic Abstraction</a>
                </h5>
              </div>
              <div id="sidebar-collapse-72" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-73">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-73" aria-expanded="true" aria-controls="sidebar-collapse-73">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-73" aria-expanded="true" aria-controls="sidebar-collapse-73">
                    -
                  </a>
                    <a href="73">1. The Metacircular Evaluator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-73" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-74">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-74" aria-expanded="false" aria-controls="sidebar-collapse-74">
                    <a href="74">1.   The Core of the Evaluator      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-75">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-75" aria-expanded="false" aria-controls="sidebar-collapse-75">
                    <a href="75">2.   Representing Statements and Expressions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-76">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-76" aria-expanded="false" aria-controls="sidebar-collapse-76">
                    <a href="76">3.   Evaluator Data Structures      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-77">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-77" aria-expanded="false" aria-controls="sidebar-collapse-77">
                    <a href="77">4.   Running the Evaluator as a Program      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-78">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-78" aria-expanded="false" aria-controls="sidebar-collapse-78">
                    <a href="78">5.   Data as Programs      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-79">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-79" aria-expanded="false" aria-controls="sidebar-collapse-79">
                    <a href="79">6.   Internal Definitions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-80">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-80" aria-expanded="false" aria-controls="sidebar-collapse-80">
                    <a href="80">7.   Separating Syntactic Analysis from Execution      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-81">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-81" aria-expanded="true" aria-controls="sidebar-collapse-81">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-81" aria-expanded="true" aria-controls="sidebar-collapse-81">
                    -
                  </a>
                    <a href="81">2. Variations on a SchemeLazy Evaluation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-81" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-82">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-81" href="#sidebar-collapse-82" aria-expanded="false" aria-controls="sidebar-collapse-82">
                    <a href="82">1.   Normal Order and Applicative Order      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-83">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-81" href="#sidebar-collapse-83" aria-expanded="false" aria-controls="sidebar-collapse-83">
                    <a href="83">2.   An Interpreter with Lazy Evaluation      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-84">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-81" href="#sidebar-collapse-84" aria-expanded="false" aria-controls="sidebar-collapse-84">
                    <a href="84">3.   Streams as Lazy Lists      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-85">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-85" aria-expanded="true" aria-controls="sidebar-collapse-85">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-85" aria-expanded="true" aria-controls="sidebar-collapse-85">
                    -
                  </a>
                    <a href="85">3. Variations on a SchemeNondeterministic Computing</a>
                </h5>
              </div>
              <div id="sidebar-collapse-85" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-86">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-85" href="#sidebar-collapse-86" aria-expanded="false" aria-controls="sidebar-collapse-86">
                    <a href="86">1.   Amb and Search      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-87">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-85" href="#sidebar-collapse-87" aria-expanded="false" aria-controls="sidebar-collapse-87">
                    <a href="87">2.   Examples of Nondeterministic Programs      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-88">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-85" href="#sidebar-collapse-88" aria-expanded="false" aria-controls="sidebar-collapse-88">
                    <a href="88">3.   Implementing the Amb Evaluator      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-89">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-89" aria-expanded="true" aria-controls="sidebar-collapse-89">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-89" aria-expanded="true" aria-controls="sidebar-collapse-89">
                    -
                  </a>
                    <a href="89">4. Logic Programming</a>
                </h5>
              </div>
              <div id="sidebar-collapse-89" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-90">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-89" href="#sidebar-collapse-90" aria-expanded="false" aria-controls="sidebar-collapse-90">
                    <a href="90">1.   Deductive Information Retrieval      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-91">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-89" href="#sidebar-collapse-91" aria-expanded="false" aria-controls="sidebar-collapse-91">
                    <a href="91">2.   How the Query System Works      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-92">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-89" href="#sidebar-collapse-92" aria-expanded="false" aria-controls="sidebar-collapse-92">
                    <a href="92">3.   Is Logic Programming Mathematical Logic?      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-93">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-89" href="#sidebar-collapse-93" aria-expanded="false" aria-controls="sidebar-collapse-93">
                    <a href="93">4.   Implementing the Query System      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-94">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-94" aria-expanded="true" aria-controls="sidebar-collapse-94">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-94" aria-expanded="true" aria-controls="sidebar-collapse-94">
                    -
                  </a>
                    <a href="94">5. Computing with Register Machines</a>
                </h5>
              </div>
              <div id="sidebar-collapse-94" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-95">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-95" aria-expanded="true" aria-controls="sidebar-collapse-95">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-95" aria-expanded="true" aria-controls="sidebar-collapse-95">
                    -
                  </a>
                    <a href="95">1. Designing Register Machines</a>
                </h5>
              </div>
              <div id="sidebar-collapse-95" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-96">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-95" href="#sidebar-collapse-96" aria-expanded="false" aria-controls="sidebar-collapse-96">
                    <a href="96">1.   A Language for Describing Register Machines      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-97">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-95" href="#sidebar-collapse-97" aria-expanded="false" aria-controls="sidebar-collapse-97">
                    <a href="97">2.   Abstraction in Machine Design      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-98">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-95" href="#sidebar-collapse-98" aria-expanded="false" aria-controls="sidebar-collapse-98">
                    <a href="98">3.   Subroutines      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-99">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-95" href="#sidebar-collapse-99" aria-expanded="false" aria-controls="sidebar-collapse-99">
                    <a href="99">4.   Using a Stack to Implement Recursion      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-100">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-95" href="#sidebar-collapse-100" aria-expanded="false" aria-controls="sidebar-collapse-100">
                    <a href="100">5.   Instruction Summary      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-101">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-101" aria-expanded="true" aria-controls="sidebar-collapse-101">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-101" aria-expanded="true" aria-controls="sidebar-collapse-101">
                    -
                  </a>
                    <a href="101">2. A Register-Machine Simulator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-101" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-102">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-101" href="#sidebar-collapse-102" aria-expanded="false" aria-controls="sidebar-collapse-102">
                    <a href="102">1.   The Machine Model      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-103">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-101" href="#sidebar-collapse-103" aria-expanded="false" aria-controls="sidebar-collapse-103">
                    <a href="103">2.   The Assembler      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-104">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-101" href="#sidebar-collapse-104" aria-expanded="false" aria-controls="sidebar-collapse-104">
                    <a href="104">3.   Generating Execution  Functions  for Instructions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-105">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-101" href="#sidebar-collapse-105" aria-expanded="false" aria-controls="sidebar-collapse-105">
                    <a href="105">4.   Monitoring Machine Performance      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-106">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-106" aria-expanded="true" aria-controls="sidebar-collapse-106">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-106" aria-expanded="true" aria-controls="sidebar-collapse-106">
                    -
                  </a>
                    <a href="106">3. Storage Allocation and Garbage Collection</a>
                </h5>
              </div>
              <div id="sidebar-collapse-106" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-107">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-106" href="#sidebar-collapse-107" aria-expanded="false" aria-controls="sidebar-collapse-107">
                    <a href="107">1.   Memory as Vectors      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-108">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-106" href="#sidebar-collapse-108" aria-expanded="false" aria-controls="sidebar-collapse-108">
                    <a href="108">2.   Maintaining the Illusion of Infinite Memory      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-109">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-109" aria-expanded="true" aria-controls="sidebar-collapse-109">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-109" aria-expanded="true" aria-controls="sidebar-collapse-109">
                    -
                  </a>
                    <a href="109">4. The Explicit-Control Evaluator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-109" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-110">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-109" href="#sidebar-collapse-110" aria-expanded="false" aria-controls="sidebar-collapse-110">
                    <a href="110">1.   The Core of the Explicit-Control Evaluator      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-111">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-109" href="#sidebar-collapse-111" aria-expanded="false" aria-controls="sidebar-collapse-111">
                    <a href="111">2.   Sequence Evaluation and Tail Recursion      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-112">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-109" href="#sidebar-collapse-112" aria-expanded="false" aria-controls="sidebar-collapse-112">
                    <a href="112">3.   Conditionals, Assignments, and Definitions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-113">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-109" href="#sidebar-collapse-113" aria-expanded="false" aria-controls="sidebar-collapse-113">
                    <a href="113">4.   Running the Evaluator      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-114">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-114" aria-expanded="true" aria-controls="sidebar-collapse-114">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-114" aria-expanded="true" aria-controls="sidebar-collapse-114">
                    -
                  </a>
                    <a href="114">5. Compilation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-114" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-115">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-115" aria-expanded="false" aria-controls="sidebar-collapse-115">
                    <a href="115">1.   Structure of the Compiler      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-116">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-116" aria-expanded="false" aria-controls="sidebar-collapse-116">
                    <a href="116">2.   Compiling Expressions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-117">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-117" aria-expanded="false" aria-controls="sidebar-collapse-117">
                    <a href="117">3.   Compiling Combinations      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-118">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-118" aria-expanded="false" aria-controls="sidebar-collapse-118">
                    <a href="118">4.   Combining Instruction Sequences      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-119">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-119" aria-expanded="false" aria-controls="sidebar-collapse-119">
                    <a href="119">5.   An Example of Compiled Code      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-120">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-120" aria-expanded="false" aria-controls="sidebar-collapse-120">
                    <a href="120">6.   Lexical Addressing      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-121">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-121" aria-expanded="false" aria-controls="sidebar-collapse-121">
                    <a href="121">7.   Interfacing Compiled Code to the Evaluator      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

          </div>

           <div class="chapter-content">
    <div class="chapter-title">
        2.2.1.
        Representing Sequences
      
    </div>
    <div class="chapter-text" >
        <div class="SUBSECTION"><SUBSECTION>
      

      
      <p>

              <img src="img_original/ch2-Z-G-13.gif">

        One of the useful structures we can build with pairs is a 
        
        
        
        <EM>
          sequence</EM>—an ordered collection of data objects.  There are, of
        course, many ways to represent sequences in terms of pairs.  One
        particularly straightforward representation is illustrated in
        Figure <REF NAME="fig:sequence-of-pairs"></REF>, where the sequence 1, 2, 3, 4 is
        represented as a chain of pairs.  The <kbd>head</kbd> of each pair is the
        corresponding item in the chain, and the <kbd>tail</kbd> of the pair is
        the next pair in the chain.  The <kbd>tail</kbd> of the final pair
        signals the end of the sequence by pointing to a distinguished
        value that is not a pair,
        represented in box-and-pointer diagrams as a diagonal line
        
        and in programs as the value of 
        
        
        JavaScript's value <kbd>[]</kbd>.
        The entire sequence is constructed by nested <kbd>pair</kbd> operations:

        <div class="snippet" id="javascript_30_0_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('pair(1,\n     pair(2,\n          pair(3,\n               pair(4,[]))))','javascript_30_0','', event,1.0);window.eval('');">pair(1,
     pair(2,
          pair(3,
               pair(4,[]))))</pre>
<a href="http://source-ide-new.surge.sh/?snippet=pair(1,%0A%20%20%20%20%20pair(2,%0A%20%20%20%20%20%20%20%20%20%20pair(3,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20pair(4,%5B%5D))))&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
      </p>

      <p>
        Such a sequence of pairs, formed by nested <kbd>pair</kbd>es, is called a
        
        <EM>list</EM>, and JavaScript provides a
        primitive called 
        
        
        <kbd>list</kbd> to help in constructing 
        lists.<a class="superscript" id="footnote-link-1" href="30#footnote-1">[1]</a>
      </p>

      <p>
        The above sequence could be produced by <kbd>list(1,2,3,4)</kbd>.  In
        general,

        <kbd EVAL="no" class="snippet">list(^a$_{1}$^,^a$_{2}$^,^$\ldots$^,^a$_{n}$^)</kbd>

        is equivalent to

        <kbd EVAL="no" class="snippet">pair(^a$_{1}$^,pair(^a$_{2}$^,pair(^$\ldots$^,pair(^a$_{n}$^,[])^$\ldots$^)))</kbd>
      </p>

      <SPLIT>
        
        
          <p>
          Our implementation of <kbd>pair</kbd> employs
          JavaScript arrays. Thus, <kbd>pair(1,2)</kbd>
          is printed as <kbd>[1,2]</kbd>, which is an
          array with the elements 1 and 2. The data object in
          Figure <REF NAME="fig:sequence-of-pairs"></REF> 
          is printed as 
          <kbd>[1,[2,[3,[4,[]]]]]</kbd>:
          </p>
        
      </SPLIT>

        <p>
        <div class="snippet" id="javascript_30_1_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('var one_through_four = list(1,2,3,4);','javascript_30_1','', event,1.0);window.eval('');">var one_through_four = list(1,2,3,4);</pre>
<a href="http://source-ide-new.surge.sh/?snippet=var%20one_through_four%20=%20list(1,2,3,4);&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        

      </p>



<SPLIT>
  
  
    <CHANGE></CHANGE>
  
</SPLIT>

      <p>
        We can think of 
        
        
        <kbd>head</kbd> as selecting the first item in the list, and
        of 
        
        <kbd>tail</kbd> as selecting the sublist consisting of all but the first
        item.  Nested applications of <kbd>head</kbd> and <kbd>tail</kbd> can be used to
        extract the second, third, and subsequent items in the
        list.
        The constructor 
        
        <kbd>pair</kbd> makes a list like the original one,
        but with an additional item at the beginning.

        <div class="snippet" id="javascript_30_2_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('head(one_through_four)','javascript_30_2','', event,1.0);window.eval('var one_through_four=list(1,2,3,4);');">head(one_through_four)</pre>
<a href="http://source-ide-new.surge.sh/?snippet=head(one_through_four)&amp;hidden=var%20one_through_four=list(1,2,3,4);" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>



        <div class="snippet" id="javascript_30_3_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('tail(one_through_four)','javascript_30_3','', event,1.0);window.eval('var one_through_four=list(1,2,3,4);');">tail(one_through_four)</pre>
<a href="http://source-ide-new.surge.sh/?snippet=tail(one_through_four)&amp;hidden=var%20one_through_four=list(1,2,3,4);" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        <div class="snippet" id="javascript_30_4_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('head(tail(one_through_four))','javascript_30_4','', event,1.0);window.eval('var one_through_four=list(1,2,3,4);');">head(tail(one_through_four))</pre>
<a href="http://source-ide-new.surge.sh/?snippet=head(tail(one_through_four))&amp;hidden=var%20one_through_four=list(1,2,3,4);" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        <div class="snippet" id="javascript_30_5_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('pair(10,one_through_four)','javascript_30_5','', event,1.0);window.eval('var one_through_four=list(1,2,3,4);');">pair(10,one_through_four)</pre>
<a href="http://source-ide-new.surge.sh/?snippet=pair(10,one_through_four)&amp;hidden=var%20one_through_four=list(1,2,3,4);" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>




        <div class="snippet" id="javascript_30_6_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('pair(5,one_through_four)','javascript_30_6','', event,1.0);window.eval('var one_through_four=list(1,2,3,4);');">pair(5,one_through_four)</pre>
<a href="http://source-ide-new.surge.sh/?snippet=pair(5,one_through_four)&amp;hidden=var%20one_through_four=list(1,2,3,4);" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

      </p>

      <SPLIT>
         
        
      <p>
        The value <kbd>[]</kbd>, 
        used to terminate the chain of pairs, can be
        thought of as a sequence of no elements, the 
        
        
        <EM>empty list</EM>.
      </p>
        
      </SPLIT>

      <h2>
        List operations
      </h2>

      
      
      <p>
        The use of pairs to represent sequences of elements as lists is
        accompanied by conventional programming techniques for manipulating
        lists by successively 
        
        
        <QUOTE><kbd>tail</kbd>ing down</QUOTE> the lists.  For example,
        the
        function
        
        <kbd>list_ref</kbd> takes as arguments a list and a number
        $n$ and returns the $n$th item of the list.  It is customary to
        number the elements of the list beginning with 0.  The method for
        computing <kbd>list_ref</kbd> is the following:

        <UL>
          <LI>For $n=0$, <kbd>list_ref</kbd> should return the <kbd>head</kbd> of the list.
          </LI>n
          <LI>Otherwise, <kbd>list_ref</kbd> should return  the $(n-1)$st item of the
            <kbd>tail</kbd> of the list.
          </LI>
        </UL>

        <div class="snippet" id="javascript_30_7_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function list_ref(items,n) {\n   if (n === 0)\n      return head(items);\n   else return list_ref(tail(items),n - 1);\n}','javascript_30_7','', event,1.0);window.eval('');">function list_ref(items,n) {
   if (n === 0)
      return head(items);
   else return list_ref(tail(items),n - 1);
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20list_ref(items,n)%20%7B%0A%20%20%20if%20(n%20===%200)%0A%20%20%20%20%20%20return%20head(items);%0A%20%20%20else%20return%20list_ref(tail(items),n%20-%201);%0A%7D&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        

        

      </p>

      <p>
        Often we <kbd>tail</kbd> down the whole list.  To aid in this, our JavaScript environment includes
          a predicate
        
        
        <kbd>is_empty_list</kbd>, which tests whether its argument is
        the empty list.  The
        function
        
        
        <kbd>length</kbd>, which
        returns the number of items in a list, illustrates this typical
        pattern of use:

        <div class="snippet" id="javascript_30_8_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function length(items) {\n   if (is_empty_list(items))\n      return 0;\n   else return 1 + length(tail(items));\n}','javascript_30_8','', event,1.0);window.eval('');">function length(items) {
   if (is_empty_list(items))
      return 0;
   else return 1 + length(tail(items));
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20length(items)%20%7B%0A%20%20%20if%20(is_empty_list(items))%0A%20%20%20%20%20%20return%200;%0A%20%20%20else%20return%201%20+%20length(tail(items));%0A%7D&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        

        
      </p>

      <p>
        The <kbd>length</kbd>
        function
        implements a simple recursive plan. The
        reduction step is:

        <UL>
          <LI>The <kbd>length</kbd> of any list is 1 plus the <kbd>length</kbd> of the
            <kbd>tail</kbd> of the list.
          </LI>
        </UL>
      </p>

      <p>
        This is applied successively until we reach the base case:

        <UL>
          <LI>The <kbd>length</kbd> of the empty list is 0.
          </LI>
        </UL>
      </p>

      <p>
        We could also compute <kbd>length</kbd> in an iterative style:

        <div class="snippet" id="javascript_30_9_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function length(items) {\n   function length_iter(a,count) {\n      if (is_empty_list(a))\n         return count;\n      else return length_iter(tail(a),count + 1);\n   }\n   return length_iter(items,0);\n}','javascript_30_9','', event,1.0);window.eval('');">function length(items) {
   function length_iter(a,count) {
      if (is_empty_list(a))
         return count;
      else return length_iter(tail(a),count + 1);
   }
   return length_iter(items,0);
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20length(items)%20%7B%0A%20%20%20function%20length_iter(a,count)%20%7B%0A%20%20%20%20%20%20if%20(is_empty_list(a))%0A%20%20%20%20%20%20%20%20%20return%20count;%0A%20%20%20%20%20%20else%20return%20length_iter(tail(a),count%20+%201);%0A%20%20%20%7D%0A%20%20%20return%20length_iter(items,0);%0A%7D&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
      </p>

      <p>
        Another conventional programming technique is to 
        
        
        <QUOTE><kbd>pair</kbd> up</QUOTE> an
        answer list while <kbd>tail</kbd>ing down a list, as in the
        function
        
        
        <kbd>append</kbd>, which takes two lists as arguments and combines their
        elements to make a new list:

        <div class="snippet" id="javascript_30_10_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('append(squares,odds)','javascript_30_10','', event,1.0);window.eval('function append(list1,list2){if(is_empty_list(list1)){return list2}else{return pair(head(list1),append(tail(list1),list2))}};var squares=list(1,4,9,16,25);var odds=list(1,3,5,7);');">append(squares,odds)</pre>
<a href="http://source-ide-new.surge.sh/?snippet=append(squares,odds)&amp;hidden=function%20append(list1,list2)%7Bif(is_empty_list(list1))%7Breturn%20list2%7Delse%7Breturn%20pair(head(list1),append(tail(list1),list2))%7D%7D;var%20squares=list(1,4,9,16,25);var%20odds=list(1,3,5,7);" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        

        <div class="snippet" id="javascript_30_11_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('append(odds,squares)','javascript_30_11','', event,1.0);window.eval('function append(list1,list2){if(is_empty_list(list1)){return list2}else{return pair(head(list1),append(tail(list1),list2))}};var squares=list(1,4,9,16,25);var odds=list(1,3,5,7);');">append(odds,squares)</pre>
<a href="http://source-ide-new.surge.sh/?snippet=append(odds,squares)&amp;hidden=function%20append(list1,list2)%7Bif(is_empty_list(list1))%7Breturn%20list2%7Delse%7Breturn%20pair(head(list1),append(tail(list1),list2))%7D%7D;var%20squares=list(1,4,9,16,25);var%20odds=list(1,3,5,7);" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
      </p>

      <p>
        <kbd>Append</kbd> is also implemented using a recursive plan.  To <kbd>append</kbd>
        lists <kbd>list1</kbd> and <kbd>list2</kbd>, do the following:

        <UL>
          <LI>If <kbd>list1</kbd> is the empty list, then the result is just <kbd>list2</kbd>.
          </LI>
          <LI>Otherwise, <kbd>append</kbd> the <kbd>tail</kbd> of <kbd>list1</kbd> and 
            <kbd>list2</kbd>, and <kbd>pair</kbd> the <kbd>head</kbd> of <kbd>list1</kbd> onto the result:
          </LI>
        </UL>

        <div class="snippet" id="javascript_30_12_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function append(list1,list2) {\n   if (is_empty_list(list1))\n      return list2;\n   else return pair(head(list1),append(tail(list1),list2));\n}','javascript_30_12','', event,1.0);window.eval('');">function append(list1,list2) {
   if (is_empty_list(list1))
      return list2;
   else return pair(head(list1),append(tail(list1),list2));
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20append(list1,list2)%20%7B%0A%20%20%20if%20(is_empty_list(list1))%0A%20%20%20%20%20%20return%20list2;%0A%20%20%20else%20return%20pair(head(list1),append(tail(list1),list2));%0A%7D&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
      </p>

      <EXERCISE> 
        Define a
        function

        
        
        <kbd>last_pair</kbd> that returns the list that contains only
        the last element of a given (nonempty) list:

        <div class="snippet" id="javascript_30_13_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('// last_pair to be given by student\nlast_pair(list(23,72,149,34))','javascript_30_13','', event,1.0);window.eval('');">// last_pair to be given by student
last_pair(list(23,72,149,34))</pre>
<a href="http://source-ide-new.surge.sh/?snippet=//%20last_pair%20to%20be%20given%20by%20student%0Alast_pair(list(23,72,149,34))&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
    
      </EXERCISE>

      <EXERCISE>
        Define a
        function

        
        
        <kbd>reverse</kbd> that takes a list as argument and
        returns a list of the same elements in reverse order:

        

        <div class="snippet" id="javascript_30_14_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('reverse(list(1,4,9,16,25))','javascript_30_14','', event,1.0);window.eval('\n// reverse to be given by student\n          ');">reverse(list(1,4,9,16,25))</pre>
<a href="http://source-ide-new.surge.sh/?snippet=reverse(list(1,4,9,16,25))&amp;hidden=%0A//%20reverse%20to%20be%20given%20by%20student%0A%20%20%20%20%20%20%20%20%20%20" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
    
      </EXERCISE>

      <EXERCISE> 
        <P>
          Consider the 
          
          change-counting program of
          Section <REF NAME="sec:tree-recursion"></REF>.  It would be nice to be able to
          easily change the currency used by the program, so that we could
          compute the number of ways to change a British pound, for example.  As
          the program is written, the knowledge of the currency is distributed
          partly into the
          function
          <kbd>first_denomination</kbd> and partly into the
          function
          <kbd>count_change</kbd> (which knows that there are five
          kinds of U.S. coins).  It would be nicer to be able to
          supply a list of coins to be used for making change.
        </P>
        <P>
          We want to rewrite the
          function
          <kbd>cc</kbd> so that its
          second argument is a list of the values of the
          coins to use rather than an integer specifying which coins to use.  We
          could then have lists that defined each kind of currency:
        <div class="snippet" id="javascript_30_15_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('var us_coins = list(50,25,10,5,1);\nvar uk_coins = list(100,50,20,10,5,2,1,0.5);','javascript_30_15','', event,1.0);window.eval('');">var us_coins = list(50,25,10,5,1);
var uk_coins = list(100,50,20,10,5,2,1,0.5);</pre>
<a href="http://source-ide-new.surge.sh/?snippet=var%20us_coins%20=%20list(50,25,10,5,1);%0Avar%20uk_coins%20=%20list(100,50,20,10,5,2,1,0.5);&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

          We could then call <kbd>cc</kbd> as follows:

        <div class="snippet" id="javascript_30_16_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('cc(100,us_coins)','javascript_30_16','', event,1.0);window.eval('\n// first_denomination, except_first_denomination\n// and no_more to be given by student\n          function cc(amount,coin_values){if(amount===0){return 1}else{if(amount&lt;0||no_more(coin_values)){return 0}else{return cc(amount,except_first_denomination(coin_values))+cc(amount-first_denomination(coin_values),coin_values)}}};var us_coins=list(50,25,10,5,1);var uk_coins=list(100,50,20,10,5,2,1,0.5);');">cc(100,us_coins)</pre>
<a href="http://source-ide-new.surge.sh/?snippet=cc(100,us_coins)&amp;hidden=%0A//%20first_denomination,%20except_first_denomination%0A//%20and%20no_more%20to%20be%20given%20by%20student%0A%20%20%20%20%20%20%20%20%20%20function%20cc(amount,coin_values)%7Bif(amount===0)%7Breturn%201%7Delse%7Bif(amount&amp;lt;0%7C%7Cno_more(coin_values))%7Breturn%200%7Delse%7Breturn%20cc(amount,except_first_denomination(coin_values))+cc(amount-first_denomination(coin_values),coin_values)%7D%7D%7D;var%20us_coins=list(50,25,10,5,1);var%20uk_coins=list(100,50,20,10,5,2,1,0.5);" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

          To do this will require changing the program <kbd>cc</kbd> somewhat.  It will
          still have the same form, but it will access its second argument
          differently, as follows:

;; first define first-denomination, except-first-denomination, and no-more

// first define first_denomination, except_first_denomination, and no_more

        

        <div class="snippet" id="javascript_30_17_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function cc(amount,coin_values) {\n   if (amount === 0) return 1;\n   else if (amount &lt; 0 || no_more(coin_values)) return 0;\n   else return cc(amount,except_first_denomination(coin_values))\n               +\n               cc(amount - first_denomination(coin_values),\n                  coin_values);\n}','javascript_30_17','', event,1.0);window.eval('\n// first_denomination, except_first_denomination\n// and no_more to be given by student\n          ');">function cc(amount,coin_values) {
   if (amount === 0) return 1;
   else if (amount &lt; 0 || no_more(coin_values)) return 0;
   else return cc(amount,except_first_denomination(coin_values))
               +
               cc(amount - first_denomination(coin_values),
                  coin_values);
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20cc(amount,coin_values)%20%7B%0A%20%20%20if%20(amount%20===%200)%20return%201;%0A%20%20%20else%20if%20(amount%20&amp;lt;%200%20%7C%7C%20no_more(coin_values))%20return%200;%0A%20%20%20else%20return%20cc(amount,except_first_denomination(coin_values))%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20+%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20cc(amount%20-%20first_denomination(coin_values),%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20coin_values);%0A%7D&amp;hidden=%0A//%20first_denomination,%20except_first_denomination%0A//%20and%20no_more%20to%20be%20given%20by%20student%0A%20%20%20%20%20%20%20%20%20%20" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        </P>
        <P>
          Define the
          functions
          <kbd>first_denomination</kbd>, <kbd>except_first_denomination</kbd>, and <kbd>no_more</kbd> in terms of primitive
          operations on list structures.  Does the order of the list <kbd>coin_values</kbd> affect the answer produced by <kbd>cc</kbd>?  Why or why not?
        </P>
    
      </EXERCISE>

      <SPLIT>
        
        
      <EXERCISE>
        
        
        
        
        <P>
        The
        function
        <kbd>list</kbd> takes an arbitrary number
        of arguments. In order to define such a
        function, we make use of two features of JavaScript. Firstly, note that
        the JavaScript interpreter tolerates additional arguments to be passed to
        any function. Thus,
        <div class="snippet" id="javascript_30_18_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function f(x,y) {\n   return x + y;\n}\nf(1,2,3,4);','javascript_30_18','', event,1.0);window.eval('');">function f(x,y) {
   return x + y;
}
f(1,2,3,4);</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20f(x,y)%20%7B%0A%20%20%20return%20x%20+%20y;%0A%7D%0Af(1,2,3,4);&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
        will return the number 3. 
        </P>
        <P>
Secondly, the variable 
        <kbd>arguments</kbd> can be used in any
        function body to refer to all actual arguments. The actual arguments
        are represented by 
        <kbd>arguments</kbd> as an array, and thus
        available using the notation
        <kbd>arguments[0]</kbd>, 
        <kbd>arguments[1]</kbd>, etc.
        For example,
        <div class="snippet" id="javascript_30_19_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function g() {\n   return arguments[0] + arguments[1] + arguments[2];\n}\nf(1,2,3,4);','javascript_30_19','', event,1.0);window.eval('');">function g() {
   return arguments[0] + arguments[1] + arguments[2];
}
f(1,2,3,4);</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20g()%20%7B%0A%20%20%20return%20arguments%5B0%5D%20+%20arguments%5B1%5D%20+%20arguments%5B2%5D;%0A%7D%0Af(1,2,3,4);&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
        will return the number 6.
        </P>
        <P>
        Use this notation
        to write a
        function
        <kbd>same_parity</kbd> that takes one or more integers
        and returns a list of all the arguments that have the same even-odd
        parity as the first argument.  For example,
        

        <div class="snippet" id="javascript_30_20_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('same_parity(1,2,3,4,5,6,7)','javascript_30_20','', event,1.0);window.eval('\n// same_parity to be given by student\n          ');">same_parity(1,2,3,4,5,6,7)</pre>
<a href="http://source-ide-new.surge.sh/?snippet=same_parity(1,2,3,4,5,6,7)&amp;hidden=%0A//%20same_parity%20to%20be%20given%20by%20student%0A%20%20%20%20%20%20%20%20%20%20" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
        returns <kbd>[1,3,5,7]</kbd>, and
        <div class="snippet" id="javascript_30_21_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('same_parity(2,3,4,5,6,7)','javascript_30_21','', event,1.0);window.eval('\n// same_parity to be given by student\n          ');">same_parity(2,3,4,5,6,7)</pre>
<a href="http://source-ide-new.surge.sh/?snippet=same_parity(2,3,4,5,6,7)&amp;hidden=%0A//%20same_parity%20to%20be%20given%20by%20student%0A%20%20%20%20%20%20%20%20%20%20" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
        returns <kbd>[2,4,6]</kbd>.
        </P>
      </EXERCISE>
        
      </SPLIT>

      <h2>
        Mapping over lists
      </h2>

      
      
      <p>
        One extremely useful operation is to apply some transformation
        to each element in a list and generate the list of results.
        For instance, the following
        function
        scales each number in a list by
        a given factor:

        <div class="snippet" id="javascript_30_22_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function scale_list(items,factor) {\n   if (is_empty_list(items)) return [];\n   else return pair(head(items) * factor,\n                    scale_list(tail(items),factor));\n}','javascript_30_22','', event,1.0);window.eval('');">function scale_list(items,factor) {
   if (is_empty_list(items)) return [];
   else return pair(head(items) * factor,
                    scale_list(tail(items),factor));
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20scale_list(items,factor)%20%7B%0A%20%20%20if%20(is_empty_list(items))%20return%20%5B%5D;%0A%20%20%20else%20return%20pair(head(items)%20*%20factor,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20scale_list(tail(items),factor));%0A%7D&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        <div class="snippet" id="javascript_30_23_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('scale_list(list(1,2,3,4,5),10)','javascript_30_23','', event,1.0);window.eval('function scale_list(items,factor){if(is_empty_list(items)){return[]}else{return pair(head(items)*factor,scale_list(tail(items),factor))}};');">scale_list(list(1,2,3,4,5),10)</pre>
<a href="http://source-ide-new.surge.sh/?snippet=scale_list(list(1,2,3,4,5),10)&amp;hidden=function%20scale_list(items,factor)%7Bif(is_empty_list(items))%7Breturn%5B%5D%7Delse%7Breturn%20pair(head(items)*factor,scale_list(tail(items),factor))%7D%7D;" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
      </p>

      <p>
        We can abstract this general idea and capture it as a common pattern
        expressed as a higher-order
        function, just as in
        Section <REF NAME="sec:higher-order-procedures"></REF>.  The higher-order
        function
        here is called <kbd>map</kbd>.  The function <kbd>map</kbd> takes as arguments a
        function
        of one argument
        and a list, and returns a list of the results produced by
        applying the
        function
        to each element in the list:<a class="superscript" id="footnote-link-2" href="30#footnote-2">[2]</a>

        
        <div class="snippet" id="javascript_30_24_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function map(fun,items) {\n   if (is_empty_list(items)) \n      return [];\n   else return pair(fun(head(items)),\n                    map(fun,tail(items)));\n}','javascript_30_24','', event,1.0);window.eval('');">function map(fun,items) {
   if (is_empty_list(items)) 
      return [];
   else return pair(fun(head(items)),
                    map(fun,tail(items)));
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20map(fun,items)%20%7B%0A%20%20%20if%20(is_empty_list(items))%20%0A%20%20%20%20%20%20return%20%5B%5D;%0A%20%20%20else%20return%20pair(fun(head(items)),%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20map(fun,tail(items)));%0A%7D&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        <div class="snippet" id="javascript_30_25_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('map(abs,list(-10,2.5,-11.6,17))','javascript_30_25','', event,1.0);window.eval('function abs(x){if(x&gt;=0){return x}else{return -x}};function map(fun,items){if(is_empty_list(items)){return[]}else{return pair(fun(head(items)),map(fun,tail(items)))}};');">map(abs,list(-10,2.5,-11.6,17))</pre>
<a href="http://source-ide-new.surge.sh/?snippet=map(abs,list(-10,2.5,-11.6,17))&amp;hidden=function%20abs(x)%7Bif(x&amp;gt;=0)%7Breturn%20x%7Delse%7Breturn%20-x%7D%7D;function%20map(fun,items)%7Bif(is_empty_list(items))%7Breturn%5B%5D%7Delse%7Breturn%20pair(fun(head(items)),map(fun,tail(items)))%7D%7D;" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        <div class="snippet" id="javascript_30_26_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('map(function(x) { return x * x; },\n    list(1,2,3,4))','javascript_30_26','', event,1.0);window.eval('function map(fun,items){if(is_empty_list(items)){return[]}else{return pair(fun(head(items)),map(fun,tail(items)))}};');">map(function(x) { return x * x; },
    list(1,2,3,4))</pre>
<a href="http://source-ide-new.surge.sh/?snippet=map(function(x)%20%7B%20return%20x%20*%20x;%20%7D,%0A%20%20%20%20list(1,2,3,4))&amp;hidden=function%20map(fun,items)%7Bif(is_empty_list(items))%7Breturn%5B%5D%7Delse%7Breturn%20pair(fun(head(items)),map(fun,tail(items)))%7D%7D;" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
      </p>

      <p>
        Now we can give a new definition of <kbd>scale_list</kbd> in terms of <kbd>map</kbd>:
        <div class="snippet" id="javascript_30_27_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function scale_list(items,factor) {\n   return map(function(x) { return x * factor; },\n              items);\n}','javascript_30_27','', event,1.0);window.eval('function map(fun,items){if(is_empty_list(items)){return[]}else{return pair(fun(head(items)),map(fun,tail(items)))}};');">function scale_list(items,factor) {
   return map(function(x) { return x * factor; },
              items);
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20scale_list(items,factor)%20%7B%0A%20%20%20return%20map(function(x)%20%7B%20return%20x%20*%20factor;%20%7D,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20items);%0A%7D&amp;hidden=function%20map(fun,items)%7Bif(is_empty_list(items))%7Breturn%5B%5D%7Delse%7Breturn%20pair(fun(head(items)),map(fun,tail(items)))%7D%7D;" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
      </p>

      <p>
        <kbd>Map</kbd> is an important construct, not only because it captures a
        common pattern, but because it establishes a higher level of
        abstraction in dealing with lists.  In the original definition of <kbd>scale_list</kbd>, the recursive structure of the program draws attention to
        the element-by-element processing of the list.  Defining <kbd>scale_list</kbd> in terms of <kbd>map</kbd> suppresses that level of detail and
        emphasizes that scaling transforms a list of elements to a list of
        results.  The difference between the two definitions is not that the
        computer is performing a different process (it isn't) but that we
        think about the process differently.  In effect, <kbd>map</kbd> helps
        establish an abstraction barrier that isolates the implementation of
        functions
        that transform lists from the details of how the
        elements of the list are extracted and combined.  Like the barriers
        shown in Figure <REF NAME="fig:abstraction-barriers"></REF>, this abstraction gives
        us the flexibility to change the low-level details of how sequences
        are implemented, while preserving the conceptual framework of
        operations that transform sequences to sequences.
        Section <REF NAME="sec:sequences-conventional-interfaces"></REF> expands on this use
        of sequences as a framework for organizing programs.
      </p>

      <EXERCISE>
        The
        function
        <kbd>square_list</kbd> takes a list of
        numbers as argument and returns a list of the squares of those
        numbers.

        

        <div class="snippet" id="javascript_30_28_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('// square_list to be given by student\nsquare_list(list(1,2,3,4))','javascript_30_28','', event,1.0);window.eval('function square(x){return x*x};\n// square_list to be given by student\n          ');">// square_list to be given by student
square_list(list(1,2,3,4))</pre>
<a href="http://source-ide-new.surge.sh/?snippet=//%20square_list%20to%20be%20given%20by%20student%0Asquare_list(list(1,2,3,4))&amp;hidden=function%20square(x)%7Breturn%20x*x%7D;%0A//%20square_list%20to%20be%20given%20by%20student%0A%20%20%20%20%20%20%20%20%20%20" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        Here are two different definitions of <kbd>square_list</kbd>.  Complete
        both of them by filling in the missing expressions:

        <kbd EVAL="no" class="snippet">function square_list(items) {
   if is_empty_list(items) 
      return [];
   else return pair(^??^,^??^);
}

function square_list(items) {
   return map(^??^,^??^);
}</kbd>
    
      </EXERCISE>

      <EXERCISE> 
        Louis Reasoner tries to rewrite the first <kbd>square_list</kbd>
        function
        of
        Exercise <REF NAME="ex:square-list"></REF> so that it evolves an iterative
        process:

        <div class="snippet" id="javascript_30_29_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function square_list(items) {\n   function iter(things,answer) {\n      if (is_empty_list(things))\n         return answer;\n      else return iter(tail(things),\n                       pair(square(head(things)),\n                            answer));\n   }\n   return iter(items,[]);\n}','javascript_30_29','', event,1.0);window.eval('function square(x){return x*x};');">function square_list(items) {
   function iter(things,answer) {
      if (is_empty_list(things))
         return answer;
      else return iter(tail(things),
                       pair(square(head(things)),
                            answer));
   }
   return iter(items,[]);
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20square_list(items)%20%7B%0A%20%20%20function%20iter(things,answer)%20%7B%0A%20%20%20%20%20%20if%20(is_empty_list(things))%0A%20%20%20%20%20%20%20%20%20return%20answer;%0A%20%20%20%20%20%20else%20return%20iter(tail(things),%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20pair(square(head(things)),%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20answer));%0A%20%20%20%7D%0A%20%20%20return%20iter(items,%5B%5D);%0A%7D&amp;hidden=function%20square(x)%7Breturn%20x*x%7D;" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        Unfortunately, defining <kbd>square_list</kbd> this way produces the answer
        list in the reverse order of the one desired.  Why?

        Louis then tries to fix his bug by interchanging the arguments to
        <kbd>pair</kbd>:

        <div class="snippet" id="javascript_30_30_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function square_list(items) {\n   function iter(things,answer) {\n      if (is_empty_list(things))\n         return answer;\n      else return iter(tail(things),\n                       pair(answer,\n                            square(head(things))));\n   }\n   return iter(items,[]);\n}','javascript_30_30','', event,1.0);window.eval('function square(x){return x*x};');">function square_list(items) {
   function iter(things,answer) {
      if (is_empty_list(things))
         return answer;
      else return iter(tail(things),
                       pair(answer,
                            square(head(things))));
   }
   return iter(items,[]);
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20square_list(items)%20%7B%0A%20%20%20function%20iter(things,answer)%20%7B%0A%20%20%20%20%20%20if%20(is_empty_list(things))%0A%20%20%20%20%20%20%20%20%20return%20answer;%0A%20%20%20%20%20%20else%20return%20iter(tail(things),%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20pair(answer,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20square(head(things))));%0A%20%20%20%7D%0A%20%20%20return%20iter(items,%5B%5D);%0A%7D&amp;hidden=function%20square(x)%7Breturn%20x*x%7D;" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        This doesn't work either.  Explain.
        
    
      </EXERCISE>

      <EXERCISE>
        The
        function

        
        <kbd>for_each</kbd> is similar to <kbd>map</kbd>.  It takes as
        arguments a
        function
        and a list of elements.  However, rather than
        forming a list of the  results, <kbd>for_each</kbd> just applies the
        function
        to each of the elements in turn, from left to right.  The values
        returned by applying the
        function
        to the elements are not used at
        all—<kbd>for_each</kbd> is used with
        functions
        that perform an action,
        such as printing.  For example,

        

        <div class="snippet" id="javascript_30_31_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('for_each(function(x) { newline(); display(x); },\n         list(57,321,88));','javascript_30_31','', event,1.0);window.eval('\n// for_each to be defined by the student\n          ');">for_each(function(x) { newline(); display(x); },
         list(57,321,88));</pre>
<a href="http://source-ide-new.surge.sh/?snippet=for_each(function(x)%20%7B%20newline();%20display(x);%20%7D,%0A%20%20%20%20%20%20%20%20%20list(57,321,88));&amp;hidden=%0A//%20for_each%20to%20be%20defined%20by%20the%20student%0A%20%20%20%20%20%20%20%20%20%20" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        The value returned by the call to <kbd>for_each</kbd> (not illustrated above)
        can be something arbitrary, such as true.  Give an
        implementation of <kbd>for_each</kbd>.
        
    
      </EXERCISE>
      
      

    <hr>
<div class="footnote">
<a class="footnote-number" id="footnote-1" href="30#footnote-link-1">[1] </a><FOOTNOTE>In this book, we use <EM>list</EM> to mean a chain of
          pairs terminated by the end-of-list marker.  In contrast, the term
          
          
          <EM>list structure</EM> refers to any data structure made out of pairs,
          not just to lists.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-2" href="30#footnote-link-2">[2] </a><FOOTNOTE>Our JavaScript environment provides a 
          
          <kbd>map</kbd>
          function
          that is more general
          than the one described here.
          This more general <kbd>map</kbd>
          takes a
          function
          of $n$ arguments, together with $n$ lists, and
          applies the
          function
          to all the first elements of
          the lists, all the second elements of the lists, and so on,
          returning a list of the results.  For example:
        <div class="snippet" id="javascript_30_32_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('map(plus,\n    list(1,2,3),\n    list(40,50,60),\n    list(700,800,900))','javascript_30_32','', event,1.0);window.eval('function map(){if(is_empty_list(arguments[1])){return[]}else{var f=arguments[0];var f_args=[];var map_args=[f];for(var i=1;i&lt;arguments.length;i++){f_args[i-1]=head(arguments[i]);map_args[i]=tail(arguments[i])}return pair(apply(f,f_args),apply(map,map_args))}};function plus(){var result=0;for(var i=0;i&lt;arguments.length;i++){result=result+arguments[i]}return result};');">map(plus,
    list(1,2,3),
    list(40,50,60),
    list(700,800,900))</pre>
<a href="http://source-ide-new.surge.sh/?snippet=map(plus,%0A%20%20%20%20list(1,2,3),%0A%20%20%20%20list(40,50,60),%0A%20%20%20%20list(700,800,900))&amp;hidden=function%20map()%7Bif(is_empty_list(arguments%5B1%5D))%7Breturn%5B%5D%7Delse%7Bvar%20f=arguments%5B0%5D;var%20f_args=%5B%5D;var%20map_args=%5Bf%5D;for(var%20i=1;i" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

<CHANGE>
          
</CHANGE>

        
        

        <div class="snippet" id="javascript_30_33_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('map(function(x,y) { return x + 2 * y; },\n    list(1,2,3),\n    list(4,5,6))','javascript_30_33','', event,1.0);window.eval('function map(){if(is_empty_list(arguments[1])){return[]}else{var f=arguments[0];var f_args=[];var map_args=[f];for(var i=1;i&lt;arguments.length;i++){f_args[i-1]=head(arguments[i]);map_args[i]=tail(arguments[i])}return pair(apply(f,f_args),apply(map,map_args))}};');">map(function(x,y) { return x + 2 * y; },
    list(1,2,3),
    list(4,5,6))</pre>
<a href="http://source-ide-new.surge.sh/?snippet=map(function(x,y)%20%7B%20return%20x%20+%202%20*%20y;%20%7D,%0A%20%20%20%20list(1,2,3),%0A%20%20%20%20list(4,5,6))&amp;hidden=function%20map()%7Bif(is_empty_list(arguments%5B1%5D))%7Breturn%5B%5D%7Delse%7Bvar%20f=arguments%5B0%5D;var%20f_args=%5B%5D;var%20map_args=%5Bf%5D;for(var%20i=1;i" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
        </FOOTNOTE>
</div></SUBSECTION></div>
    </div>

    <div class="nav">
    <!--
      <div type="button" class="btn btn-secondary">
        <a href="http://localhost:3000/chapters/29">&lt; Previous</a>
    </div>
    -->
      <div type="button" class="btn btn-secondary">
        <a class="scroll-next" href="31">Next &gt;</a>
      </div>


  </div>
  <script>
//<![CDATA[
var chapter_id = 30;
//]]>
</script>
  <div class="next-page"></div>
</div>

     </div><!-- /.container -->

     <!--<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>
     -->
   </body>
</html>
