<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SicpTextbookRails</title>
    <meta name="csrf-param" content="authenticity_token" />
<meta name="csrf-token" content="dt1mrYOWqqx5X7k02sga+OYXS59GB5RzLWgQ6oJMcreKVzYkn9WrtN90KwBOH5AyAP8jyXjh8BdsHCBQw0hbWQ==" />

    <!--<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">
    -->
    <link href="https://fonts.googleapis.com/css?family=Droid+Sans|Droid+Sans+Mono|Droid+Serif" rel="stylesheet">
    <link rel="stylesheet" media="all" href="../assets/application-4afa0dc75ea8a2ff925eb41df709aa5f5fae6640df639d9b6ae50ed06be5a5d2.css" />

    <link rel="shortcut icon" type="image/x-icon" href="../assets/favicon-5cc7f923fb946d60fe9552847f4b6edd0f8cf2f122d6f3fef39d59ce84d47942.ico" />

    <script src="https://code.jquery.com/jquery-3.2.1.min.js"
			  integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
	          crossorigin="anonymous">
    </script>
    <script src="http://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>
    <script type="text/javascript" async
        src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML">
    </script>

    <script src="../assets/application-e1d34c17f2d1680f21b650089aea08e3ecfe292f1157f2d23bfa7d4d9d530c8b.js"></script>

    <!-- Rendering inline LaTeX -->
    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({
        tex2jax: {
          inlineMath: [ ['$','$'], ["\\(","\\)"] ],
          processEscapes: true,
          jax: ["input/TeX","output/HTML-CSS"]
        }
      });
    </script>
    <!--<script src="/mathjax/MathJax.js?config=TeX-AMS_HTML-full.js" type="text/javascript"></script>-->
    <!-- Le HTML5 shim, for IE6-8 support of HTML elements -->
    <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.2/html5shiv.min.js" type="text/javascript"></script>
    <![endif]-->
  </head>
  <body>

     <nav class="navbar navbar-toggleable-md navbar-inverse bg-inverse fixed-top">
      <button class="navbar-toggler collapsed" type="button" data-toggle="collapse" data-target="#nav-sidebar" aria-controls="nav-sidebar" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
       <a class="navbar-brand navbar-brand-short" href="../chapters">CS1101S: SICP</a>
       <a class="navbar-brand navbar-brand-long" href="../chapters">CS1101S: Structure and Interpretation
          of Computer Programs</a>

       <div class="collapse navbar-collapse" id="navbarsExampleDefault">
         <form id="search" class="form-inline my-2 my-lg-0">
           <input id="search-box" class="form-control mr-sm-2" type="text" placeholder="Search">
           <div id="search-button" class="btn btn-outline-success my-2 my-sm-0">Search</div>

           <script>
               (function() {
                var cx = "002429487986305006822:ztnrbwx01qy";
                var gcse = document.createElement('script');
                gcse.type = 'text/javascript';
                gcse.async = true;
                gcse.src = 'https://cse.google.com/cse.js?cx=' + cx;
                var s = document.getElementsByTagName('script')[0];
                s.parentNode.insertBefore(gcse, s);
               })();
            </script>
            <gcse:search></gcse:search>
         </form>
       </div>
     </nav>

     <div class="container scroll">

          <div class="collapse" id="nav-sidebar" role="tablist" aria-multiselectable="true">
                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-122">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-122" aria-expanded="false" aria-controls="sidebar-collapse-122">
                    <a href="122">About</a>
                  </a>
                </h5>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-123">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-123" aria-expanded="false" aria-controls="sidebar-collapse-123">
                    <a href="123">References</a>
                  </a>
                </h5>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-124">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-124" aria-expanded="false" aria-controls="sidebar-collapse-124">
                    <a href="124">Webpreface</a>
                  </a>
                </h5>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-1">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-1" aria-expanded="true" aria-controls="sidebar-collapse-1">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-1" aria-expanded="true" aria-controls="sidebar-collapse-1">
                    -
                  </a>
                    <a href="1">1.       Building Abstractions with       Functions    </a>
                </h5>
              </div>
              <div id="sidebar-collapse-1" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-2">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-2" aria-expanded="true" aria-controls="sidebar-collapse-2">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-2" aria-expanded="true" aria-controls="sidebar-collapse-2">
                    -
                  </a>
                    <a href="2">1. The Elements of Programming</a>
                </h5>
              </div>
              <div id="sidebar-collapse-2" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-3">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-3" aria-expanded="false" aria-controls="sidebar-collapse-3">
                    <a href="3">1. Expressions</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-4">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-4" aria-expanded="false" aria-controls="sidebar-collapse-4">
                    <a href="4">2. Naming and the Environment</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-5">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-5" aria-expanded="false" aria-controls="sidebar-collapse-5">
                    <a href="5">3.           Evaluating          Operator Combinations                  </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-6">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-6" aria-expanded="false" aria-controls="sidebar-collapse-6">
                    <a href="6">4.           Functions        </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-7">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-7" aria-expanded="false" aria-controls="sidebar-collapse-7">
                    <a href="7">5.           The Substitution Model for                                                 Function                              Application        </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-8">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-8" aria-expanded="false" aria-controls="sidebar-collapse-8">
                    <a href="8">6.           Conditional                                           Statements                              and Predicates        </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-9">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-9" aria-expanded="false" aria-controls="sidebar-collapse-9">
                    <a href="9">7. Example: Square Roots by Newtons Method</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-10">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-10" aria-expanded="false" aria-controls="sidebar-collapse-10">
                    <a href="10">8.                                                 Functions                                as Black-Box Abstractions        </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-11">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-11" aria-expanded="true" aria-controls="sidebar-collapse-11">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-11" aria-expanded="true" aria-controls="sidebar-collapse-11">
                    -
                  </a>
                    <a href="11">2.             Functions            and the Processes They Generate      </a>
                </h5>
              </div>
              <div id="sidebar-collapse-11" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-12">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-12" aria-expanded="false" aria-controls="sidebar-collapse-12">
                    <a href="12">1. Linear Recursion and Iteration</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-13">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-13" aria-expanded="false" aria-controls="sidebar-collapse-13">
                    <a href="13">2. Tree Recursion</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-14">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-14" aria-expanded="false" aria-controls="sidebar-collapse-14">
                    <a href="14">3. Orders of Growth</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-15">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-15" aria-expanded="false" aria-controls="sidebar-collapse-15">
                    <a href="15">4. Exponentiation</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-16">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-16" aria-expanded="false" aria-controls="sidebar-collapse-16">
                    <a href="16">5. Greatest Common Divisors</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-17">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-17" aria-expanded="false" aria-controls="sidebar-collapse-17">
                    <a href="17">6. Example: Testing for Primality</a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-18">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-18" aria-expanded="true" aria-controls="sidebar-collapse-18">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-18" aria-expanded="true" aria-controls="sidebar-collapse-18">
                    -
                  </a>
                    <a href="18">3.         Formulating Abstractions with Higher-Order         Functions      </a>
                </h5>
              </div>
              <div id="sidebar-collapse-18" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-19">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-18" href="#sidebar-collapse-19" aria-expanded="false" aria-controls="sidebar-collapse-19">
                    <a href="19">1.           Functions          as Arguments        </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-20">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-18" href="#sidebar-collapse-20" aria-expanded="false" aria-controls="sidebar-collapse-20">
                    <a href="20">2.           Function Definition Expressions          </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-21">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-18" href="#sidebar-collapse-21" aria-expanded="false" aria-controls="sidebar-collapse-21">
                    <a href="21">3.             Functions            as General Methods          </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-22">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-18" href="#sidebar-collapse-22" aria-expanded="false" aria-controls="sidebar-collapse-22">
                    <a href="22">4.               Functions              as Returned Values            </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-23">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-23" aria-expanded="true" aria-controls="sidebar-collapse-23">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-23" aria-expanded="true" aria-controls="sidebar-collapse-23">
                    -
                  </a>
                    <a href="23">2. Building Abstractions with Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-23" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-24">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-24" aria-expanded="true" aria-controls="sidebar-collapse-24">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-24" aria-expanded="true" aria-controls="sidebar-collapse-24">
                    -
                  </a>
                    <a href="24">1. Introduction to Data Abstraction</a>
                </h5>
              </div>
              <div id="sidebar-collapse-24" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-25">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-24" href="#sidebar-collapse-25" aria-expanded="false" aria-controls="sidebar-collapse-25">
                    <a href="25">1.         Example: Arithmetic Operations for Rational Numbers      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-26">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-24" href="#sidebar-collapse-26" aria-expanded="false" aria-controls="sidebar-collapse-26">
                    <a href="26">2.         Abstraction Barriers      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-27">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-24" href="#sidebar-collapse-27" aria-expanded="false" aria-controls="sidebar-collapse-27">
                    <a href="27">3.         What Is Meant by Data?      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-28">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-24" href="#sidebar-collapse-28" aria-expanded="false" aria-controls="sidebar-collapse-28">
                    <a href="28">4.         Extended Exercise: Interval Arithmetic      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-29">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-29" aria-expanded="true" aria-controls="sidebar-collapse-29">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-29" aria-expanded="true" aria-controls="sidebar-collapse-29">
                    -
                  </a>
                    <a href="29">2. Hierarchical Data and the Closure Property</a>
                </h5>
              </div>
              <div id="sidebar-collapse-29" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-30">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-29" href="#sidebar-collapse-30" aria-expanded="false" aria-controls="sidebar-collapse-30">
                    <a href="30">1.         Representing Sequences      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-31">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-29" href="#sidebar-collapse-31" aria-expanded="false" aria-controls="sidebar-collapse-31">
                    <a href="31">2.         Hierarchical Structures      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-32">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-29" href="#sidebar-collapse-32" aria-expanded="false" aria-controls="sidebar-collapse-32">
                    <a href="32">3.         Sequences as Conventional Interfaces      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-33">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-29" href="#sidebar-collapse-33" aria-expanded="false" aria-controls="sidebar-collapse-33">
                    <a href="33">4.         Example: A Picture Language      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-34">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-34" aria-expanded="true" aria-controls="sidebar-collapse-34">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-34" aria-expanded="true" aria-controls="sidebar-collapse-34">
                    -
                  </a>
                    <a href="34">3. Symbolic Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-34" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-35">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-34" href="#sidebar-collapse-35" aria-expanded="false" aria-controls="sidebar-collapse-35">
                    <a href="35">1.         Strings      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-36">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-34" href="#sidebar-collapse-36" aria-expanded="false" aria-controls="sidebar-collapse-36">
                    <a href="36">2.         Example: Symbolic Differentiation      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-37">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-34" href="#sidebar-collapse-37" aria-expanded="false" aria-controls="sidebar-collapse-37">
                    <a href="37">3.         Example: Representing Sets      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-38">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-34" href="#sidebar-collapse-38" aria-expanded="false" aria-controls="sidebar-collapse-38">
                    <a href="38">4.         Example: Huffman Encoding Trees      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-39">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-39" aria-expanded="true" aria-controls="sidebar-collapse-39">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-39" aria-expanded="true" aria-controls="sidebar-collapse-39">
                    -
                  </a>
                    <a href="39">4. Multiple Representations for Abstract Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-39" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-40">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-39" href="#sidebar-collapse-40" aria-expanded="false" aria-controls="sidebar-collapse-40">
                    <a href="40">1.         Representations for Complex Numbers      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-41">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-39" href="#sidebar-collapse-41" aria-expanded="false" aria-controls="sidebar-collapse-41">
                    <a href="41">2.         Tagged data      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-42">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-39" href="#sidebar-collapse-42" aria-expanded="false" aria-controls="sidebar-collapse-42">
                    <a href="42">3.         Data-Directed Programming and Additivity      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-43">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-43" aria-expanded="true" aria-controls="sidebar-collapse-43">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-43" aria-expanded="true" aria-controls="sidebar-collapse-43">
                    -
                  </a>
                    <a href="43">5. Systems with Generic Operations</a>
                </h5>
              </div>
              <div id="sidebar-collapse-43" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-44">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-43" href="#sidebar-collapse-44" aria-expanded="false" aria-controls="sidebar-collapse-44">
                    <a href="44">1.         Generic Arithmetic Operations      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-45">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-43" href="#sidebar-collapse-45" aria-expanded="false" aria-controls="sidebar-collapse-45">
                    <a href="45">2.         Combining Data of Different Types      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-46">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-43" href="#sidebar-collapse-46" aria-expanded="false" aria-controls="sidebar-collapse-46">
                    <a href="46">3.         Example: Symbolic Algebra      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-47">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-47" aria-expanded="true" aria-controls="sidebar-collapse-47">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-47" aria-expanded="true" aria-controls="sidebar-collapse-47">
                    -
                  </a>
                    <a href="47">3. Modularity, Objects, and State</a>
                </h5>
              </div>
              <div id="sidebar-collapse-47" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-48">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-48" aria-expanded="true" aria-controls="sidebar-collapse-48">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-48" aria-expanded="true" aria-controls="sidebar-collapse-48">
                    -
                  </a>
                    <a href="48">1. Assignment and Local State</a>
                </h5>
              </div>
              <div id="sidebar-collapse-48" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-49">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-48" href="#sidebar-collapse-49" aria-expanded="false" aria-controls="sidebar-collapse-49">
                    <a href="49">1.         Local State Variables      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-50">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-48" href="#sidebar-collapse-50" aria-expanded="false" aria-controls="sidebar-collapse-50">
                    <a href="50">2.         The Benefits of Introducing Assignment      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-51">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-48" href="#sidebar-collapse-51" aria-expanded="false" aria-controls="sidebar-collapse-51">
                    <a href="51">3.         The Costs of Introducing Assignment      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-52">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-52" aria-expanded="true" aria-controls="sidebar-collapse-52">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-52" aria-expanded="true" aria-controls="sidebar-collapse-52">
                    -
                  </a>
                    <a href="52">2. The Environment Model of Evaluation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-52" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-53">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-52" href="#sidebar-collapse-53" aria-expanded="false" aria-controls="sidebar-collapse-53">
                    <a href="53">1.         The Rules for Evaluation      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-54">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-52" href="#sidebar-collapse-54" aria-expanded="false" aria-controls="sidebar-collapse-54">
                    <a href="54">2.         Applying Simple        Functions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-55">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-52" href="#sidebar-collapse-55" aria-expanded="false" aria-controls="sidebar-collapse-55">
                    <a href="55">3.         Frames as the Repository of Local State      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-56">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-52" href="#sidebar-collapse-56" aria-expanded="false" aria-controls="sidebar-collapse-56">
                    <a href="56">4.         Internal Definitions      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-57">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-57" aria-expanded="true" aria-controls="sidebar-collapse-57">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-57" aria-expanded="true" aria-controls="sidebar-collapse-57">
                    -
                  </a>
                    <a href="57">3. Modeling with Mutable Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-57" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-58">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-57" href="#sidebar-collapse-58" aria-expanded="false" aria-controls="sidebar-collapse-58">
                    <a href="58">1.         Mutable List Structure      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-59">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-57" href="#sidebar-collapse-59" aria-expanded="false" aria-controls="sidebar-collapse-59">
                    <a href="59">2.         Representing Queues      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-60">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-57" href="#sidebar-collapse-60" aria-expanded="false" aria-controls="sidebar-collapse-60">
                    <a href="60">3.         Representing Tables      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-61">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-57" href="#sidebar-collapse-61" aria-expanded="false" aria-controls="sidebar-collapse-61">
                    <a href="61">4.         A Simulator for Digital Circuits      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-62">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-57" href="#sidebar-collapse-62" aria-expanded="false" aria-controls="sidebar-collapse-62">
                    <a href="62">5.         Propagation of Constraints      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-63">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-63" aria-expanded="true" aria-controls="sidebar-collapse-63">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-63" aria-expanded="true" aria-controls="sidebar-collapse-63">
                    -
                  </a>
                    <a href="63">4. Concurrency: Time Is of the Essence</a>
                </h5>
              </div>
              <div id="sidebar-collapse-63" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-64">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-63" href="#sidebar-collapse-64" aria-expanded="false" aria-controls="sidebar-collapse-64">
                    <a href="64">1.         The Nature of Time in Concurrent Systems      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-65">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-63" href="#sidebar-collapse-65" aria-expanded="false" aria-controls="sidebar-collapse-65">
                    <a href="65">2.         Mechanisms for Controlling Concurrency      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-66">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-66" aria-expanded="true" aria-controls="sidebar-collapse-66">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-66" aria-expanded="true" aria-controls="sidebar-collapse-66">
                    -
                  </a>
                    <a href="66">5. Streams</a>
                </h5>
              </div>
              <div id="sidebar-collapse-66" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-67">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-66" href="#sidebar-collapse-67" aria-expanded="false" aria-controls="sidebar-collapse-67">
                    <a href="67">1.         Streams Are Delayed Lists      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-68">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-66" href="#sidebar-collapse-68" aria-expanded="false" aria-controls="sidebar-collapse-68">
                    <a href="68">2.         Infinite Streams      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-69">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-66" href="#sidebar-collapse-69" aria-expanded="false" aria-controls="sidebar-collapse-69">
                    <a href="69">3.   Exploiting the Stream Paradigm      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-70">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-66" href="#sidebar-collapse-70" aria-expanded="false" aria-controls="sidebar-collapse-70">
                    <a href="70">4.   Streams and Delayed Evaluation      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-71">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-66" href="#sidebar-collapse-71" aria-expanded="false" aria-controls="sidebar-collapse-71">
                    <a href="71">5.   Modularity of Functional Programs and Modularity of Objects      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-72">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-72" aria-expanded="true" aria-controls="sidebar-collapse-72">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-72" aria-expanded="true" aria-controls="sidebar-collapse-72">
                    -
                  </a>
                    <a href="72">4. Metalinguistic Abstraction</a>
                </h5>
              </div>
              <div id="sidebar-collapse-72" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-73">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-73" aria-expanded="true" aria-controls="sidebar-collapse-73">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-73" aria-expanded="true" aria-controls="sidebar-collapse-73">
                    -
                  </a>
                    <a href="73">1. The Metacircular Evaluator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-73" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-74">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-74" aria-expanded="false" aria-controls="sidebar-collapse-74">
                    <a href="74">1.   The Core of the Evaluator      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-75">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-75" aria-expanded="false" aria-controls="sidebar-collapse-75">
                    <a href="75">2.   Representing Statements and Expressions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-76">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-76" aria-expanded="false" aria-controls="sidebar-collapse-76">
                    <a href="76">3.   Evaluator Data Structures      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-77">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-77" aria-expanded="false" aria-controls="sidebar-collapse-77">
                    <a href="77">4.   Running the Evaluator as a Program      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-78">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-78" aria-expanded="false" aria-controls="sidebar-collapse-78">
                    <a href="78">5.   Data as Programs      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-79">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-79" aria-expanded="false" aria-controls="sidebar-collapse-79">
                    <a href="79">6.   Internal Definitions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-80">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-80" aria-expanded="false" aria-controls="sidebar-collapse-80">
                    <a href="80">7.   Separating Syntactic Analysis from Execution      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-81">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-81" aria-expanded="true" aria-controls="sidebar-collapse-81">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-81" aria-expanded="true" aria-controls="sidebar-collapse-81">
                    -
                  </a>
                    <a href="81">2. Variations on a SchemeLazy Evaluation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-81" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-82">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-81" href="#sidebar-collapse-82" aria-expanded="false" aria-controls="sidebar-collapse-82">
                    <a href="82">1.   Normal Order and Applicative Order      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-83">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-81" href="#sidebar-collapse-83" aria-expanded="false" aria-controls="sidebar-collapse-83">
                    <a href="83">2.   An Interpreter with Lazy Evaluation      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-84">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-81" href="#sidebar-collapse-84" aria-expanded="false" aria-controls="sidebar-collapse-84">
                    <a href="84">3.   Streams as Lazy Lists      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-85">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-85" aria-expanded="true" aria-controls="sidebar-collapse-85">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-85" aria-expanded="true" aria-controls="sidebar-collapse-85">
                    -
                  </a>
                    <a href="85">3. Variations on a SchemeNondeterministic Computing</a>
                </h5>
              </div>
              <div id="sidebar-collapse-85" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-86">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-85" href="#sidebar-collapse-86" aria-expanded="false" aria-controls="sidebar-collapse-86">
                    <a href="86">1.   Amb and Search      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-87">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-85" href="#sidebar-collapse-87" aria-expanded="false" aria-controls="sidebar-collapse-87">
                    <a href="87">2.   Examples of Nondeterministic Programs      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-88">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-85" href="#sidebar-collapse-88" aria-expanded="false" aria-controls="sidebar-collapse-88">
                    <a href="88">3.   Implementing the Amb Evaluator      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-89">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-89" aria-expanded="true" aria-controls="sidebar-collapse-89">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-89" aria-expanded="true" aria-controls="sidebar-collapse-89">
                    -
                  </a>
                    <a href="89">4. Logic Programming</a>
                </h5>
              </div>
              <div id="sidebar-collapse-89" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-90">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-89" href="#sidebar-collapse-90" aria-expanded="false" aria-controls="sidebar-collapse-90">
                    <a href="90">1.   Deductive Information Retrieval      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-91">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-89" href="#sidebar-collapse-91" aria-expanded="false" aria-controls="sidebar-collapse-91">
                    <a href="91">2.   How the Query System Works      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-92">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-89" href="#sidebar-collapse-92" aria-expanded="false" aria-controls="sidebar-collapse-92">
                    <a href="92">3.   Is Logic Programming Mathematical Logic?      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-93">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-89" href="#sidebar-collapse-93" aria-expanded="false" aria-controls="sidebar-collapse-93">
                    <a href="93">4.   Implementing the Query System      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-94">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-94" aria-expanded="true" aria-controls="sidebar-collapse-94">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-94" aria-expanded="true" aria-controls="sidebar-collapse-94">
                    -
                  </a>
                    <a href="94">5. Computing with Register Machines</a>
                </h5>
              </div>
              <div id="sidebar-collapse-94" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-95">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-95" aria-expanded="true" aria-controls="sidebar-collapse-95">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-95" aria-expanded="true" aria-controls="sidebar-collapse-95">
                    -
                  </a>
                    <a href="95">1. Designing Register Machines</a>
                </h5>
              </div>
              <div id="sidebar-collapse-95" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-96">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-95" href="#sidebar-collapse-96" aria-expanded="false" aria-controls="sidebar-collapse-96">
                    <a href="96">1.   A Language for Describing Register Machines      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-97">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-95" href="#sidebar-collapse-97" aria-expanded="false" aria-controls="sidebar-collapse-97">
                    <a href="97">2.   Abstraction in Machine Design      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-98">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-95" href="#sidebar-collapse-98" aria-expanded="false" aria-controls="sidebar-collapse-98">
                    <a href="98">3.   Subroutines      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-99">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-95" href="#sidebar-collapse-99" aria-expanded="false" aria-controls="sidebar-collapse-99">
                    <a href="99">4.   Using a Stack to Implement Recursion      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-100">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-95" href="#sidebar-collapse-100" aria-expanded="false" aria-controls="sidebar-collapse-100">
                    <a href="100">5.   Instruction Summary      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-101">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-101" aria-expanded="true" aria-controls="sidebar-collapse-101">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-101" aria-expanded="true" aria-controls="sidebar-collapse-101">
                    -
                  </a>
                    <a href="101">2. A Register-Machine Simulator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-101" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-102">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-101" href="#sidebar-collapse-102" aria-expanded="false" aria-controls="sidebar-collapse-102">
                    <a href="102">1.   The Machine Model      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-103">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-101" href="#sidebar-collapse-103" aria-expanded="false" aria-controls="sidebar-collapse-103">
                    <a href="103">2.   The Assembler      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-104">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-101" href="#sidebar-collapse-104" aria-expanded="false" aria-controls="sidebar-collapse-104">
                    <a href="104">3.   Generating Execution  Functions  for Instructions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-105">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-101" href="#sidebar-collapse-105" aria-expanded="false" aria-controls="sidebar-collapse-105">
                    <a href="105">4.   Monitoring Machine Performance      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-106">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-106" aria-expanded="true" aria-controls="sidebar-collapse-106">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-106" aria-expanded="true" aria-controls="sidebar-collapse-106">
                    -
                  </a>
                    <a href="106">3. Storage Allocation and Garbage Collection</a>
                </h5>
              </div>
              <div id="sidebar-collapse-106" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-107">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-106" href="#sidebar-collapse-107" aria-expanded="false" aria-controls="sidebar-collapse-107">
                    <a href="107">1.   Memory as Vectors      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-108">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-106" href="#sidebar-collapse-108" aria-expanded="false" aria-controls="sidebar-collapse-108">
                    <a href="108">2.   Maintaining the Illusion of Infinite Memory      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-109">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-109" aria-expanded="true" aria-controls="sidebar-collapse-109">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-109" aria-expanded="true" aria-controls="sidebar-collapse-109">
                    -
                  </a>
                    <a href="109">4. The Explicit-Control Evaluator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-109" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-110">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-109" href="#sidebar-collapse-110" aria-expanded="false" aria-controls="sidebar-collapse-110">
                    <a href="110">1.   The Core of the Explicit-Control Evaluator      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-111">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-109" href="#sidebar-collapse-111" aria-expanded="false" aria-controls="sidebar-collapse-111">
                    <a href="111">2.   Sequence Evaluation and Tail Recursion      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-112">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-109" href="#sidebar-collapse-112" aria-expanded="false" aria-controls="sidebar-collapse-112">
                    <a href="112">3.   Conditionals, Assignments, and Definitions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-113">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-109" href="#sidebar-collapse-113" aria-expanded="false" aria-controls="sidebar-collapse-113">
                    <a href="113">4.   Running the Evaluator      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-114">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-114" aria-expanded="true" aria-controls="sidebar-collapse-114">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-114" aria-expanded="true" aria-controls="sidebar-collapse-114">
                    -
                  </a>
                    <a href="114">5. Compilation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-114" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-115">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-115" aria-expanded="false" aria-controls="sidebar-collapse-115">
                    <a href="115">1.   Structure of the Compiler      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-116">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-116" aria-expanded="false" aria-controls="sidebar-collapse-116">
                    <a href="116">2.   Compiling Expressions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-117">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-117" aria-expanded="false" aria-controls="sidebar-collapse-117">
                    <a href="117">3.   Compiling Combinations      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-118">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-118" aria-expanded="false" aria-controls="sidebar-collapse-118">
                    <a href="118">4.   Combining Instruction Sequences      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-119">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-119" aria-expanded="false" aria-controls="sidebar-collapse-119">
                    <a href="119">5.   An Example of Compiled Code      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-120">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-120" aria-expanded="false" aria-controls="sidebar-collapse-120">
                    <a href="120">6.   Lexical Addressing      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-121">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-121" aria-expanded="false" aria-controls="sidebar-collapse-121">
                    <a href="121">7.   Interfacing Compiled Code to the Evaluator      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

          </div>

           <div class="chapter-content">
    <div class="chapter-title">
        2.5.2.
        Combining Data of Different Types
      
    </div>
    <div class="chapter-text" >
        <div class="SUBSECTION"><SUBSECTION>
      

      

      <p>
      We have seen how to define a unified arithmetic system that
      encompasses ordinary numbers, complex numbers, rational numbers, and
      any other type of number we might decide to invent, but we have
      ignored an important issue.  The operations we have defined so far
      treat the different data types as being completely independent.  Thus,
      there are separate packages for adding, say, two ordinary numbers, or
      two complex numbers.  What we have not yet considered is the fact that
      it is meaningful to define operations that cross the type boundaries,
      such as the addition of a complex number to an ordinary number.  We
      have gone to great pains to introduce barriers between parts of our
      programs so that they can be developed and understood separately.  We
      would like to introduce the cross-type operations in some carefully
      controlled way, so that we can support them
      without seriously violating our module boundaries.
      </p>
      <p>
      
      
      
      One way to handle cross-type operations is to design a different
      function
      for each possible combination of types for which the
      operation is valid.  For example, we could extend the complex-number
      package so that it provides a
      function
      for adding complex numbers to
      ordinary numbers and installs this in the table using the tag <kbd>list("complex","javascript_number")</kbd>:<a class="superscript" id="footnote-link-1" href="45#footnote-1">[1]</a>
      <div class="snippet" id="javascript_45_0_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function add_complex_to_javascript_num(z,x) {\n   return make_from_real_imag(add(real_part(z), x),\n                              imag_part(z));\n}\nput(&quot;add&quot;,list(&quot;complex&quot;,&quot;javascript_number&quot;),\n    function(z,x) { return tag(add_complex_to_javascript_num(z,x)); })','javascript_45_0','', event,1.0);window.eval('');">function add_complex_to_javascript_num(z,x) {
   return make_from_real_imag(add(real_part(z), x),
                              imag_part(z));
}
put("add",list("complex","javascript_number"),
    function(z,x) { return tag(add_complex_to_javascript_num(z,x)); })</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20add_complex_to_javascript_num(z,x)%20%7B%0A%20%20%20return%20make_from_real_imag(add(real_part(z),%20x),%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20imag_part(z));%0A%7D%0Aput(%22add%22,list(%22complex%22,%22javascript_number%22),%0A%20%20%20%20function(z,x)%20%7B%20return%20tag(add_complex_to_javascript_num(z,x));%20%7D)&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
      </p>
      <p>
      This technique works, but it is cumbersome.  With such a system, the
      cost of introducing a new type is not just the construction of the
      package of
      functions
      for that type but also the construction and
      installation of the
      functions
      that implement the cross-type
      operations.  This can easily be much more code than is needed to
      define the operations on the type itself.  The method also undermines
      our ability to combine separate packages additively, or
      least to limit the extent to which the implementors of the individual
      packages need to take account of other packages.  For instance, in the
      example above, it seems reasonable that handling mixed operations on
      complex numbers and ordinary numbers should be the responsibility of
      the complex-number package.  Combining rational numbers and complex
      numbers, however, might be done by the complex package, by the
      rational package, or by some third package that uses operations
      extracted from these two packages.  Formulating coherent policies on the
      division of responsibility among packages can be an overwhelming task
      in designing systems with many packages and many cross-type
      operations.
      </p>

      <h2>
        Coercion
      </h2>

      
      <p>
      In the general situation of completely unrelated operations acting on
      completely unrelated types, implementing explicit cross-type
      operations, cumbersome though it may be, is the best that one can hope
      for.  Fortunately, we can usually do better by taking advantage of
      additional structure that may be latent in our type system.  Often the
      different data types are not completely independent, and there may be
      ways by which objects of one type may be viewed as being of another
      type.  This process is called <EM>coercion</EM>.  For example, if we are
      asked to arithmetically combine an ordinary number with a complex
      number, we can view the ordinary number as a complex number whose
      imaginary part is zero.  This transforms the problem to that of
      combining two complex numbers, which can be handled in the ordinary
      way by the complex-arithmetic package.
      </p>
      <p>
      
      In general, we can implement this idea by designing coercion
      functions
      that transform an object of one type into an equivalent
      object of another type.  Here is a typical coercion
      function, which
      transforms a given ordinary number to a complex number with that real
      part and zero imaginary part:

      <div class="snippet" id="javascript_45_1_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function javascript_number_to_complex(n) {\n   return make_complex_from_real_imag(contents(n),0);\n}','javascript_45_1','', event,1.0);window.eval('');">function javascript_number_to_complex(n) {
   return make_complex_from_real_imag(contents(n),0);
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20javascript_number_to_complex(n)%20%7B%0A%20%20%20return%20make_complex_from_real_imag(contents(n),0);%0A%7D&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

      
      
      We install these coercion
      functions
      in a special coercion table,
      indexed under the names of the two types:

      <div class="snippet" id="javascript_45_2_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('put_coercion(&quot;javascipt_number&quot;,&quot;complex&quot;,javascript_number_to_complex)','javascript_45_2','', event,1.0);window.eval('');">put_coercion("javascipt_number","complex",javascript_number_to_complex)</pre>
<a href="http://source-ide-new.surge.sh/?snippet=put_coercion(%22javascipt_number%22,%22complex%22,javascript_number_to_complex)&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        (We assume that there are <kbd>put_coercion</kbd> and <kbd>get_coercion</kbd>
      functions
      available for manipulating this table.)  Generally some of
      the slots in the table will be empty, because it is not generally
      possible to coerce an arbitrary data object of each type into all
      other types.  For example, there is no way to coerce an arbitrary
      complex number to an ordinary number, so there will be no general <kbd>complex_to_javascript_number</kbd>
      function
      included in the table.
      </p>
      <p>
      Once the coercion table has been set up, we can handle coercion in a
      uniform manner by modifying the <kbd>apply_generic</kbd>
      function
      of
      Section <REF NAME="sec:data-directed"></REF>.  When asked to apply an operation, we
      first check whether the operation is defined for the arguments' types,
      just as before.  If so, we dispatch to the
      function
      found in the
      operation-and-type table.
      Otherwise, we try coercion.  For simplicity, we consider only the case
      where there are two arguments.<a class="superscript" id="footnote-link-2" href="45#footnote-2">[2]</a>  We
      check the coercion table to see if objects of the first type can
      be coerced to the second type.  If so, we coerce the first argument and try the
      operation again.  If objects of the first type cannot in general be coerced to
      the second type, we try the coercion the other way around to see if there is a
      way to coerce the second argument to the type of the first argument.
      Finally, if there
      is no known way to coerce either type to the other type, we give up.
      Here is the
      function:

      
      <div class="snippet" id="javascript_45_3_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function apply_generic(op,args) {\n   var type_tags = map(type_tag,args);\n   var fun = get(op,type_tags);\n   if (fun != false)\n      return fun(map(contents,args));\n   else\n      if (length(args) === 2) {\n         var type1 = head(type_tags);\n         var type2 = head(tail(type_tags));\n         var a1 = head(args);\n         var a2 = head(tail(args));\n         var t1_to_t2 = get_coercion(type1,type2);\n         var t2_to_t1 = get_coercion(type2,type1);\n         if (t1_to_t2 != false)\n            return apply_generic(op,list(t1_to_t2(a1),a2));\n         else if (t2_to_t1 != false)\n            return apply_generic(op,list(a1,t2_to_t1(a2)));\n         else \n            return error(&quot;No method for these types&quot;,\n                         list(op,type_tags));\n      } else\n           return error(&quot;No method for these types&quot;,\n                        list(op,type_tags));\n}','javascript_45_3','', event,1.0);window.eval('');">function apply_generic(op,args) {
   var type_tags = map(type_tag,args);
   var fun = get(op,type_tags);
   if (fun != false)
      return fun(map(contents,args));
   else
      if (length(args) === 2) {
         var type1 = head(type_tags);
         var type2 = head(tail(type_tags));
         var a1 = head(args);
         var a2 = head(tail(args));
         var t1_to_t2 = get_coercion(type1,type2);
         var t2_to_t1 = get_coercion(type2,type1);
         if (t1_to_t2 != false)
            return apply_generic(op,list(t1_to_t2(a1),a2));
         else if (t2_to_t1 != false)
            return apply_generic(op,list(a1,t2_to_t1(a2)));
         else 
            return error("No method for these types",
                         list(op,type_tags));
      } else
           return error("No method for these types",
                        list(op,type_tags));
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20apply_generic(op,args)%20%7B%0A%20%20%20var%20type_tags%20=%20map(type_tag,args);%0A%20%20%20var%20fun%20=%20get(op,type_tags);%0A%20%20%20if%20(fun%20!=%20false)%0A%20%20%20%20%20%20return%20fun(map(contents,args));%0A%20%20%20else%0A%20%20%20%20%20%20if%20(length(args)%20===%202)%20%7B%0A%20%20%20%20%20%20%20%20%20var%20type1%20=%20head(type_tags);%0A%20%20%20%20%20%20%20%20%20var%20type2%20=%20head(tail(type_tags));%0A%20%20%20%20%20%20%20%20%20var%20a1%20=%20head(args);%0A%20%20%20%20%20%20%20%20%20var%20a2%20=%20head(tail(args));%0A%20%20%20%20%20%20%20%20%20var%20t1_to_t2%20=%20get_coercion(type1,type2);%0A%20%20%20%20%20%20%20%20%20var%20t2_to_t1%20=%20get_coercion(type2,type1);%0A%20%20%20%20%20%20%20%20%20if%20(t1_to_t2%20!=%20false)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20apply_generic(op,list(t1_to_t2(a1),a2));%0A%20%20%20%20%20%20%20%20%20else%20if%20(t2_to_t1%20!=%20false)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20apply_generic(op,list(a1,t2_to_t1(a2)));%0A%20%20%20%20%20%20%20%20%20else%20%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20error(%22No%20method%20for%20these%20types%22,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20list(op,type_tags));%0A%20%20%20%20%20%20%7D%20else%0A%20%20%20%20%20%20%20%20%20%20%20return%20error(%22No%20method%20for%20these%20types%22,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20list(op,type_tags));%0A%7D&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
      </p>
      <p>
      This coercion scheme has many advantages over the method of defining
      explicit cross-type operations, as outlined above.  Although we still
      need to write coercion
      functions
      to relate the types (possibly $n^2$
      functions
      for a system with $n$ types), we need to write only one
      function
      for each pair of types rather than a different
      function
      for
      each collection of types and each generic operation.<a class="superscript" id="footnote-link-3" href="45#footnote-3">[3]</a>  What we are counting on here is the fact that the
      appropriate transformation between types depends only on the types
      themselves, not on the operation to be applied.
      </p>
      <p>
      On the other hand, there may be applications for which our coercion
      scheme is not general enough.  Even when neither of the objects to be
      combined can be converted to the type of the other it may still be
      possible to perform the operation by converting both objects to a
      third type.  In order to deal with such complexity and still preserve
      modularity in our programs, it is usually necessary to build systems
      that take advantage of still further structure in the relations among
      types, as we discuss next.
      </p>

      <h2>
        Hierarchies of types
      </h2>

      
      
      <p>
      The coercion scheme presented above relied on the existence of natural
      relations between pairs of types.  Often there is more <QUOTE>global</QUOTE>
      structure in how the different types relate to each other.  For
      instance, suppose we are building a generic arithmetic system to
      handle integers, rational numbers, real numbers, and complex numbers.
      In such a system, it is quite natural to regard an integer as a
      special kind of rational number, which is in turn a special kind of
      real number, which is in turn a special kind of complex number.  What
      we actually have is a so-called <EM>hierarchy of types</EM>, in which,
      for example, integers are a 
      
      
      <EM>subtype</EM> of rational numbers (i.e.,
      any operation that can be applied to a rational number can
      automatically be applied to an integer).  Conversely, we say that
      rational numbers form a 
      
      
      <EM>supertype</EM> of integers.  The particular
      hierarchy we have here is of a very simple kind, in which each type
      has at most one supertype and at most one subtype.  Such a structure,
      called a <EM>tower</EM>, is illustrated in Figure <REF NAME="fig:tower"></REF>.

      <img src="img_original/ch2-Z-G-66.gif">
      
      
      </p>
      <p>
      If we have a tower structure, then we can greatly simplify the problem
      of adding a new type to the hierarchy, for we need only specify how
      the new type is embedded in the next supertype above it and how it is
      the supertype of the type below it.  For example, if we want to add an
      integer to a complex number, we need not explicitly define a special
      coercion
      function
      <kbd>integer_to_complex</kbd>.  Instead, we define how an
      integer can be transformed into a rational number, how a rational
      number is transformed into a real number, and how a real number is
      transformed into a complex number.  We then allow the system to
      transform the integer into a complex number through these steps and
      then add the two complex numbers.
      </p>
      <p>
      
      
      We can redesign our <kbd>apply_generic</kbd>
      function
      in the following
      way: For each type, we need to supply a <kbd>raise</kbd>
      function, which
      <QUOTE>raises</QUOTE> objects of that type one level in the tower.  Then when the
      system is required to operate on objects of different types it can
      successively raise the lower types until all the objects are at
      the same level in the tower.  (Exercises <REF NAME="ex:raise"></REF>
      and  <REF NAME="ex:apply-with-raise"></REF>
      concern the details of implementing such a strategy.)
      </p>
      <p>
      Another advantage of a tower is that we can easily implement the
      notion that every type <QUOTE>inherits</QUOTE> all operations defined on a
      supertype.  For instance, if we do not supply a special
      function
      for
      finding the real part of an integer, we should nevertheless expect
      that <kbd>real_part</kbd> will be defined for integers by virtue of the
      fact that integers are a subtype of complex numbers.  In a tower, we
      can arrange for this to happen in a uniform way by modifying <kbd>apply_generic</kbd>.  If the required operation is not directly defined for
      the type of the object given, we raise the object to its supertype and
      try again.  We thus crawl up the tower, transforming our argument as we
      go, until we either find a level at which the desired operation can be
      performed or hit the top (in which case we give up).
      </p>
      <p>
      
      Yet another advantage of a tower over a more general hierarchy is that
      it gives us a simple way to <QUOTE>lower</QUOTE> a data object to the simplest
      representation.  For example, if we add $2+3i$ to $4-3i$, it would be
      nice to obtain the answer as the integer 6 rather than as the complex
      number $6+0i$.  Exercise <REF NAME="ex:simplify"></REF> discusses a way to implement
      such a lowering operation.  (The trick is that we need a general way
      to distinguish those objects that can be lowered, such as $6+0i$, from
      those that cannot, such as $6+2i$.)

      <img src="img_original/ch2-Z-G-67.gif">

      </p>

      <h2>
        Inadequacies of hierarchies
      </h2>

      
      <p>
      If the data types in our system can be naturally arranged in a tower,
      this greatly simplifies the problems of dealing with generic operations
      on different types, as we have seen.  Unfortunately, this is usually
      not the case.  Figure <REF NAME="fig:relations-among-figures"></REF> illustrates a
      more complex arrangement of mixed types, this one showing relations
      among different types of geometric figures.  We see that, in general,
      
      
      
      a type may have more than one subtype.  Triangles and quadrilaterals,
      for instance, are both subtypes of polygons.  In addition, a type may
      have more than one supertype.  For example, an isosceles right
      triangle may be regarded either as an isosceles triangle or as a right
      triangle.  This multiple-supertypes issue is particularly thorny,
      since it means that there is no unique way to <QUOTE>raise</QUOTE> a type in the
      hierarchy.  Finding the <QUOTE>correct</QUOTE> supertype in which to apply an
      operation to an object may involve considerable searching through the
      entire type network on the part of a
      function
      such as <kbd>apply_generic</kbd>.  Since there generally are multiple subtypes for a
      type, there is a similar problem in coercing a value <QUOTE>down</QUOTE> the type
      hierarchy.  Dealing with large numbers of interrelated types while
      still preserving modularity in the design of large systems is very
      difficult, and is an area of much current research.<a class="superscript" id="footnote-link-4" href="45#footnote-4">[4]</a>
      </p>

      <EXERCISE>
        
        Louis Reasoner has noticed that <kbd>apply_generic</kbd> may try to
        coerce the arguments to each other's type even if they already have
        the same type.  Therefore, he reasons, we need to put
        functions
        in the coercion table to <QUOTE>coerce</QUOTE> arguments of each type to their
        own type.  For example, in addition to the <kbd>javascript_number_to_complex</kbd>
        coercion shown above, he would do:

        <div class="snippet" id="javascript_45_4_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function javascript_number_to_javascript_number(n){ return n; }\nfunction complex_number_to_complex_number(n){ return n; }\nput_coercion(&quot;javascript_number&quot;,&quot;javascript_number&quot;,\n             javascript_number_to_javascript_number);\nput_coercion(&quot;complex_number&quot;,&quot;complex_number&quot;,\n             complex_number_to_complex_number);','javascript_45_4','', event,1.0);window.eval('');">function javascript_number_to_javascript_number(n){ return n; }
function complex_number_to_complex_number(n){ return n; }
put_coercion("javascript_number","javascript_number",
             javascript_number_to_javascript_number);
put_coercion("complex_number","complex_number",
             complex_number_to_complex_number);</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20javascript_number_to_javascript_number(n)%7B%20return%20n;%20%7D%0Afunction%20complex_number_to_complex_number(n)%7B%20return%20n;%20%7D%0Aput_coercion(%22javascript_number%22,%22javascript_number%22,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20javascript_number_to_javascript_number);%0Aput_coercion(%22complex_number%22,%22complex_number%22,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20complex_number_to_complex_number);&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        <OL>
          <LI>
            With Louis's coercion
            functions
            installed, what happens if <kbd>apply_generic</kbd>
            is called with two arguments of type <kbd>"javascript_number"</kbd> or two arguments of
            type <kbd>"complex"</kbd> for an operation that is not found in the table for those
            types?  For example, assume that we've defined a generic exponentiation
            operation:

            <div class="snippet" id="javascript_45_5_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function exp(x,y) { return apply_generic(&quot;exp&quot;,list(x,y)); }','javascript_45_5','', event,1.0);window.eval('');">function exp(x,y) { return apply_generic("exp",list(x,y)); }</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20exp(x,y)%20%7B%20return%20apply_generic(%22exp%22,list(x,y));%20%7D&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

            and have put a
            function
            for exponentiation in the 
JavaScript-number
            package but not in any other package:

            <div class="snippet" id="javascript_45_6_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('// following added to JavaScript-number package\nput(&quot;exp&quot;,list(&quot;javascript_number&quot;,&quot;javascript_number&quot;),\n    function(x,y) { return tag(Math.exp(x,y)); }) // using primitive Math.exp','javascript_45_6','', event,1.0);window.eval('');">// following added to JavaScript-number package
put("exp",list("javascript_number","javascript_number"),
    function(x,y) { return tag(Math.exp(x,y)); }) // using primitive Math.exp</pre>
<a href="http://source-ide-new.surge.sh/?snippet=//%20following%20added%20to%20JavaScript-number%20package%0Aput(%22exp%22,list(%22javascript_number%22,%22javascript_number%22),%0A%20%20%20%20function(x,y)%20%7B%20return%20tag(Math.exp(x,y));%20%7D)%20//%20using%20primitive%20Math.exp&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

            What happens if we call <kbd>exp</kbd> with two complex numbers as arguments?
          </LI>
          <LI>
            Is Louis correct that something had to be done about
            coercion with arguments of the same type, or does <kbd>apply_generic</kbd>
            work correctly as is?
          </LI>
          <LI>
            Modify <kbd>apply_generic</kbd> so that it doesn't try coercion if
            the two arguments have the same type.
          </LI>
        </OL>
      </EXERCISE>

      <EXERCISE>
        
        Show how to generalize <kbd>apply_generic</kbd> to handle
        coercion in the general case of multiple arguments.  One strategy is
        to attempt to coerce all the arguments to the type of the first argument, then
        to the type of the second argument, and so on.  Give an example of a situation
        where this strategy (and likewise the two-argument version given
        above) is not sufficiently general.  (Hint: Consider the case where
        there are some suitable mixed-type operations present in the table
        that will not be tried.)
        
      </EXERCISE>


      <EXERCISE> 
        
        Suppose you are designing a generic arithmetic system for dealing with
        the tower of types shown in Figure <REF NAME="fig:tower"></REF>:
        integer, rational, real, complex.  For
        each type (except complex), design a
        function
        that raises objects of
        that type one level in the tower.  Show how to install a generic <kbd>raise</kbd> operation that will work for each type (except complex).
        
      </EXERCISE>

      <EXERCISE>
        
        Using the <kbd>raise</kbd> operation of Exercise <REF NAME="ex:raise"></REF>, modify the <kbd>apply_generic</kbd>
        function
        so that it coerces its arguments to have the
        same type by the method of successive raising, as discussed in this
        section.  You will need to devise a way to test which of two types is
        higher in the tower.  Do this in a manner that is <QUOTE>compatible</QUOTE> with
        the rest of the system and will not lead to problems in adding new
        levels to the tower.
        
      </EXERCISE>

      <EXERCISE> 
        
        
        This section mentioned a method for <QUOTE>simplifying</QUOTE> a data object
        by lowering it in the tower of types as far as possible.  Design
        a
        function
        <kbd>drop</kbd> that accomplishes this for the tower described
        in Exercise <REF NAME="ex:raise"></REF>.  The key is to decide, in some general way, whether
        an object can be lowered.  For example, the complex number $1.5+0i$
        can be lowered as far as <kbd>"real"</kbd>, the complex number $1+0i$ can be
        lowered as far as <kbd>"integer"</kbd>, and the complex number $2+3i$ cannot
        be lowered at all.  Here is a plan for determining whether an object
        can be lowered: Begin by defining a generic operation <kbd>project</kbd>
        that <QUOTE>pushes</QUOTE> an object down in the tower.  For example, projecting
        a complex number would involve throwing away the imaginary part.  Then
        a number can be dropped if, when we <kbd>project</kbd> it and <kbd>raise</kbd>
        the result back to the type we started with, we end up with something
        equal to what we started with.  Show how to implement this idea in
        detail, by writing a <kbd>drop</kbd>
        function
        that drops an object as far
        as possible.  You will need to design the various projection
        operations<a class="superscript" id="footnote-link-5" href="45#footnote-5">[5]</a> and install <kbd>project</kbd> as a generic operation in
        the system.  You will also need to make use of a generic equality
        predicate, such as described in Exercise <REF NAME="ex:equ?"></REF>.  Finally, use <kbd>drop</kbd>
        to rewrite <kbd>apply_generic</kbd> from Exercise <REF NAME="ex:apply-with-raise"></REF> so that it
        <QUOTE>simplifies</QUOTE> its answers.
        
      </EXERCISE> 

      <EXERCISE>
        Suppose we want to handle complex numbers whose real
        parts, imaginary parts, magnitudes, and angles can be either ordinary
        numbers, rational numbers, or other numbers we might wish to add to
        the system.  Describe and implement the changes to the system needed
        to accommodate this.  You will have to define operations such as <kbd>sine</kbd> and <kbd>cosine</kbd> that are generic over ordinary numbers and
        rational numbers.
      </EXERCISE> 
      
      
      

    <hr>
<div class="footnote">
<a class="footnote-number" id="footnote-1" href="45#footnote-link-1">[1] </a><FOOTNOTE>We also have to supply an almost identical
        function
        to handle the types <kbd>list("javascript_number","complex")</kbd>.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-2" href="45#footnote-link-2">[2] </a><FOOTNOTE>See
        Exercise <REF NAME="ex:multi-coercion"></REF> for generalizations.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-3" href="45#footnote-link-3">[3] </a><FOOTNOTE>If we are
        clever, we can usually get by with fewer than $n^2$ coercion
        functions.  For instance, if we know how to convert from type 1 to
        type 2 and from type 2 to type 3, then we can use this knowledge to
        convert from type 1 to type 3.  This can greatly decrease the number
        of coercion
        functions
        we need to supply explicitly when we add a new
        type to the system.  If we are willing to build the required amount of
        sophistication into our system, we can have it search the <QUOTE>graph</QUOTE> of
        relations among types and automatically generate those coercion
        functions
        that can be inferred from the ones that are supplied
        explicitly.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-4" href="45#footnote-link-4">[4] </a><FOOTNOTE>This statement, which also appears in the first edition of this book,
        is just as true now as it was when we wrote it twelve years ago.
        Developing a useful, general framework for expressing the relations
        among different types of entities (what philosophers call
        <QUOTE>ontology</QUOTE>) seems intractably difficult.  The main difference
        between the confusion that existed ten years ago and the confusion
        that exists now is that now a variety of inadequate ontological
        theories have been embodied in a plethora of correspondingly
        inadequate programming languages.  For example, much of the complexity
        of 
        
        
        object-oriented programming languages—and the subtle and
        confusing differences among contemporary object-oriented
        languages—centers on the treatment of generic operations on
        interrelated types.  Our own discussion of computational objects in
        Chapter 3 avoids these issues entirely.  Readers familiar with
        object-oriented programming will notice that we have much to say in
        Chapter 3 about local state, but we do not even mention <QUOTE>classes</QUOTE> or
        <QUOTE>inheritance.</QUOTE>  In fact, we suspect that these problems cannot be
        adequately addressed in terms of computer-language design alone,
        without also drawing on work in knowledge representation and automated
        reasoning.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-5" href="45#footnote-link-5">[5] </a><FOOTNOTE>A real number can be projected to an integer
          using the 
          
          
          <kbd>round</kbd> primitive, which returns the closest integer
          to its argument.</FOOTNOTE>
</div></SUBSECTION></div>
    </div>

    <div class="nav">
    <!--
      <div type="button" class="btn btn-secondary">
        <a href="http://localhost:3000/chapters/44">&lt; Previous</a>
    </div>
    -->
      <div type="button" class="btn btn-secondary">
        <a class="scroll-next" href="46">Next &gt;</a>
      </div>


  </div>
  <script>
//<![CDATA[
var chapter_id = 45;
//]]>
</script>
  <div class="next-page"></div>
</div>

     </div><!-- /.container -->

     <!--<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>
     -->
   </body>
</html>
