<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SicpTextbookRails</title>
    <meta name="csrf-param" content="authenticity_token" />
<meta name="csrf-token" content="cIU12qKTWDYhiou6X5zfNcwJrCzx6LvPc6oN5UxUXZmMD2VTvtBZLoehGY7LS1X/KuHEes8O36sy3j1fDVB0dw==" />

    <!--<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">
    -->
    <link href="https://fonts.googleapis.com/css?family=Droid+Sans|Droid+Sans+Mono|Droid+Serif" rel="stylesheet">
    <link rel="stylesheet" media="all" href="../assets/application-4afa0dc75ea8a2ff925eb41df709aa5f5fae6640df639d9b6ae50ed06be5a5d2.css" />

    <link rel="shortcut icon" type="image/x-icon" href="../assets/favicon-5cc7f923fb946d60fe9552847f4b6edd0f8cf2f122d6f3fef39d59ce84d47942.ico" />

    <script src="https://code.jquery.com/jquery-3.2.1.min.js"
			  integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
	          crossorigin="anonymous">
    </script>
    <script src="http://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>
    <script type="text/javascript" async
        src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML">
    </script>

    <script src="../assets/application-e1d34c17f2d1680f21b650089aea08e3ecfe292f1157f2d23bfa7d4d9d530c8b.js"></script>

    <!-- Rendering inline LaTeX -->
    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({
        tex2jax: {
          inlineMath: [ ['$','$'], ["\\(","\\)"] ],
          processEscapes: true,
          jax: ["input/TeX","output/HTML-CSS"]
        }
      });
    </script>
    <!--<script src="/mathjax/MathJax.js?config=TeX-AMS_HTML-full.js" type="text/javascript"></script>-->
    <!-- Le HTML5 shim, for IE6-8 support of HTML elements -->
    <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.2/html5shiv.min.js" type="text/javascript"></script>
    <![endif]-->
  </head>
  <body>

     <nav class="navbar navbar-toggleable-md navbar-inverse bg-inverse fixed-top">
      <button class="navbar-toggler collapsed" type="button" data-toggle="collapse" data-target="#nav-sidebar" aria-controls="nav-sidebar" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
       <a class="navbar-brand navbar-brand-short" href="../chapters">CS1101S: SICP</a>
       <a class="navbar-brand navbar-brand-long" href="../chapters">CS1101S: Structure and Interpretation
          of Computer Programs</a>

       <div class="collapse navbar-collapse" id="navbarsExampleDefault">
         <form id="search" class="form-inline my-2 my-lg-0">
           <input id="search-box" class="form-control mr-sm-2" type="text" placeholder="Search">
           <div id="search-button" class="btn btn-outline-success my-2 my-sm-0">Search</div>

           <script>
               (function() {
                var cx = "002429487986305006822:ztnrbwx01qy";
                var gcse = document.createElement('script');
                gcse.type = 'text/javascript';
                gcse.async = true;
                gcse.src = 'https://cse.google.com/cse.js?cx=' + cx;
                var s = document.getElementsByTagName('script')[0];
                s.parentNode.insertBefore(gcse, s);
               })();
            </script>
            <gcse:search></gcse:search>
         </form>
       </div>
     </nav>

     <div class="container scroll">

          <div class="collapse" id="nav-sidebar" role="tablist" aria-multiselectable="true">
                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-122">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-122" aria-expanded="false" aria-controls="sidebar-collapse-122">
                    <a href="122">About</a>
                  </a>
                </h5>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-123">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-123" aria-expanded="false" aria-controls="sidebar-collapse-123">
                    <a href="123">References</a>
                  </a>
                </h5>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-124">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-124" aria-expanded="false" aria-controls="sidebar-collapse-124">
                    <a href="124">Webpreface</a>
                  </a>
                </h5>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-1">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-1" aria-expanded="true" aria-controls="sidebar-collapse-1">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-1" aria-expanded="true" aria-controls="sidebar-collapse-1">
                    -
                  </a>
                    <a href="1">1.       Building Abstractions with       Functions    </a>
                </h5>
              </div>
              <div id="sidebar-collapse-1" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-2">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-2" aria-expanded="true" aria-controls="sidebar-collapse-2">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-2" aria-expanded="true" aria-controls="sidebar-collapse-2">
                    -
                  </a>
                    <a href="2">1. The Elements of Programming</a>
                </h5>
              </div>
              <div id="sidebar-collapse-2" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-3">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-3" aria-expanded="false" aria-controls="sidebar-collapse-3">
                    <a href="3">1. Expressions</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-4">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-4" aria-expanded="false" aria-controls="sidebar-collapse-4">
                    <a href="4">2. Naming and the Environment</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-5">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-5" aria-expanded="false" aria-controls="sidebar-collapse-5">
                    <a href="5">3.           Evaluating          Operator Combinations                  </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-6">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-6" aria-expanded="false" aria-controls="sidebar-collapse-6">
                    <a href="6">4.           Functions        </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-7">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-7" aria-expanded="false" aria-controls="sidebar-collapse-7">
                    <a href="7">5.           The Substitution Model for                                                 Function                              Application        </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-8">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-8" aria-expanded="false" aria-controls="sidebar-collapse-8">
                    <a href="8">6.           Conditional                                           Statements                              and Predicates        </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-9">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-9" aria-expanded="false" aria-controls="sidebar-collapse-9">
                    <a href="9">7. Example: Square Roots by Newtons Method</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-10">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-10" aria-expanded="false" aria-controls="sidebar-collapse-10">
                    <a href="10">8.                                                 Functions                                as Black-Box Abstractions        </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-11">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-11" aria-expanded="true" aria-controls="sidebar-collapse-11">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-11" aria-expanded="true" aria-controls="sidebar-collapse-11">
                    -
                  </a>
                    <a href="11">2.             Functions            and the Processes They Generate      </a>
                </h5>
              </div>
              <div id="sidebar-collapse-11" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-12">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-12" aria-expanded="false" aria-controls="sidebar-collapse-12">
                    <a href="12">1. Linear Recursion and Iteration</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-13">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-13" aria-expanded="false" aria-controls="sidebar-collapse-13">
                    <a href="13">2. Tree Recursion</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-14">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-14" aria-expanded="false" aria-controls="sidebar-collapse-14">
                    <a href="14">3. Orders of Growth</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-15">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-15" aria-expanded="false" aria-controls="sidebar-collapse-15">
                    <a href="15">4. Exponentiation</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-16">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-16" aria-expanded="false" aria-controls="sidebar-collapse-16">
                    <a href="16">5. Greatest Common Divisors</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-17">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-17" aria-expanded="false" aria-controls="sidebar-collapse-17">
                    <a href="17">6. Example: Testing for Primality</a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-18">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-18" aria-expanded="true" aria-controls="sidebar-collapse-18">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-18" aria-expanded="true" aria-controls="sidebar-collapse-18">
                    -
                  </a>
                    <a href="18">3.         Formulating Abstractions with Higher-Order         Functions      </a>
                </h5>
              </div>
              <div id="sidebar-collapse-18" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-19">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-18" href="#sidebar-collapse-19" aria-expanded="false" aria-controls="sidebar-collapse-19">
                    <a href="19">1.           Functions          as Arguments        </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-20">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-18" href="#sidebar-collapse-20" aria-expanded="false" aria-controls="sidebar-collapse-20">
                    <a href="20">2.           Function Definition Expressions          </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-21">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-18" href="#sidebar-collapse-21" aria-expanded="false" aria-controls="sidebar-collapse-21">
                    <a href="21">3.             Functions            as General Methods          </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-22">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-18" href="#sidebar-collapse-22" aria-expanded="false" aria-controls="sidebar-collapse-22">
                    <a href="22">4.               Functions              as Returned Values            </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-23">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-23" aria-expanded="true" aria-controls="sidebar-collapse-23">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-23" aria-expanded="true" aria-controls="sidebar-collapse-23">
                    -
                  </a>
                    <a href="23">2. Building Abstractions with Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-23" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-24">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-24" aria-expanded="true" aria-controls="sidebar-collapse-24">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-24" aria-expanded="true" aria-controls="sidebar-collapse-24">
                    -
                  </a>
                    <a href="24">1. Introduction to Data Abstraction</a>
                </h5>
              </div>
              <div id="sidebar-collapse-24" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-25">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-24" href="#sidebar-collapse-25" aria-expanded="false" aria-controls="sidebar-collapse-25">
                    <a href="25">1.         Example: Arithmetic Operations for Rational Numbers      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-26">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-24" href="#sidebar-collapse-26" aria-expanded="false" aria-controls="sidebar-collapse-26">
                    <a href="26">2.         Abstraction Barriers      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-27">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-24" href="#sidebar-collapse-27" aria-expanded="false" aria-controls="sidebar-collapse-27">
                    <a href="27">3.         What Is Meant by Data?      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-28">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-24" href="#sidebar-collapse-28" aria-expanded="false" aria-controls="sidebar-collapse-28">
                    <a href="28">4.         Extended Exercise: Interval Arithmetic      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-29">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-29" aria-expanded="true" aria-controls="sidebar-collapse-29">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-29" aria-expanded="true" aria-controls="sidebar-collapse-29">
                    -
                  </a>
                    <a href="29">2. Hierarchical Data and the Closure Property</a>
                </h5>
              </div>
              <div id="sidebar-collapse-29" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-30">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-29" href="#sidebar-collapse-30" aria-expanded="false" aria-controls="sidebar-collapse-30">
                    <a href="30">1.         Representing Sequences      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-31">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-29" href="#sidebar-collapse-31" aria-expanded="false" aria-controls="sidebar-collapse-31">
                    <a href="31">2.         Hierarchical Structures      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-32">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-29" href="#sidebar-collapse-32" aria-expanded="false" aria-controls="sidebar-collapse-32">
                    <a href="32">3.         Sequences as Conventional Interfaces      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-33">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-29" href="#sidebar-collapse-33" aria-expanded="false" aria-controls="sidebar-collapse-33">
                    <a href="33">4.         Example: A Picture Language      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-34">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-34" aria-expanded="true" aria-controls="sidebar-collapse-34">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-34" aria-expanded="true" aria-controls="sidebar-collapse-34">
                    -
                  </a>
                    <a href="34">3. Symbolic Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-34" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-35">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-34" href="#sidebar-collapse-35" aria-expanded="false" aria-controls="sidebar-collapse-35">
                    <a href="35">1.         Strings      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-36">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-34" href="#sidebar-collapse-36" aria-expanded="false" aria-controls="sidebar-collapse-36">
                    <a href="36">2.         Example: Symbolic Differentiation      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-37">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-34" href="#sidebar-collapse-37" aria-expanded="false" aria-controls="sidebar-collapse-37">
                    <a href="37">3.         Example: Representing Sets      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-38">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-34" href="#sidebar-collapse-38" aria-expanded="false" aria-controls="sidebar-collapse-38">
                    <a href="38">4.         Example: Huffman Encoding Trees      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-39">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-39" aria-expanded="true" aria-controls="sidebar-collapse-39">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-39" aria-expanded="true" aria-controls="sidebar-collapse-39">
                    -
                  </a>
                    <a href="39">4. Multiple Representations for Abstract Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-39" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-40">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-39" href="#sidebar-collapse-40" aria-expanded="false" aria-controls="sidebar-collapse-40">
                    <a href="40">1.         Representations for Complex Numbers      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-41">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-39" href="#sidebar-collapse-41" aria-expanded="false" aria-controls="sidebar-collapse-41">
                    <a href="41">2.         Tagged data      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-42">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-39" href="#sidebar-collapse-42" aria-expanded="false" aria-controls="sidebar-collapse-42">
                    <a href="42">3.         Data-Directed Programming and Additivity      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-43">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-43" aria-expanded="true" aria-controls="sidebar-collapse-43">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-43" aria-expanded="true" aria-controls="sidebar-collapse-43">
                    -
                  </a>
                    <a href="43">5. Systems with Generic Operations</a>
                </h5>
              </div>
              <div id="sidebar-collapse-43" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-44">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-43" href="#sidebar-collapse-44" aria-expanded="false" aria-controls="sidebar-collapse-44">
                    <a href="44">1.         Generic Arithmetic Operations      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-45">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-43" href="#sidebar-collapse-45" aria-expanded="false" aria-controls="sidebar-collapse-45">
                    <a href="45">2.         Combining Data of Different Types      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-46">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-43" href="#sidebar-collapse-46" aria-expanded="false" aria-controls="sidebar-collapse-46">
                    <a href="46">3.         Example: Symbolic Algebra      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-47">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-47" aria-expanded="true" aria-controls="sidebar-collapse-47">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-47" aria-expanded="true" aria-controls="sidebar-collapse-47">
                    -
                  </a>
                    <a href="47">3. Modularity, Objects, and State</a>
                </h5>
              </div>
              <div id="sidebar-collapse-47" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-48">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-48" aria-expanded="true" aria-controls="sidebar-collapse-48">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-48" aria-expanded="true" aria-controls="sidebar-collapse-48">
                    -
                  </a>
                    <a href="48">1. Assignment and Local State</a>
                </h5>
              </div>
              <div id="sidebar-collapse-48" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-49">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-48" href="#sidebar-collapse-49" aria-expanded="false" aria-controls="sidebar-collapse-49">
                    <a href="49">1.         Local State Variables      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-50">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-48" href="#sidebar-collapse-50" aria-expanded="false" aria-controls="sidebar-collapse-50">
                    <a href="50">2.         The Benefits of Introducing Assignment      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-51">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-48" href="#sidebar-collapse-51" aria-expanded="false" aria-controls="sidebar-collapse-51">
                    <a href="51">3.         The Costs of Introducing Assignment      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-52">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-52" aria-expanded="true" aria-controls="sidebar-collapse-52">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-52" aria-expanded="true" aria-controls="sidebar-collapse-52">
                    -
                  </a>
                    <a href="52">2. The Environment Model of Evaluation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-52" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-53">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-52" href="#sidebar-collapse-53" aria-expanded="false" aria-controls="sidebar-collapse-53">
                    <a href="53">1.         The Rules for Evaluation      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-54">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-52" href="#sidebar-collapse-54" aria-expanded="false" aria-controls="sidebar-collapse-54">
                    <a href="54">2.         Applying Simple        Functions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-55">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-52" href="#sidebar-collapse-55" aria-expanded="false" aria-controls="sidebar-collapse-55">
                    <a href="55">3.         Frames as the Repository of Local State      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-56">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-52" href="#sidebar-collapse-56" aria-expanded="false" aria-controls="sidebar-collapse-56">
                    <a href="56">4.         Internal Definitions      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-57">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-57" aria-expanded="true" aria-controls="sidebar-collapse-57">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-57" aria-expanded="true" aria-controls="sidebar-collapse-57">
                    -
                  </a>
                    <a href="57">3. Modeling with Mutable Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-57" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-58">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-57" href="#sidebar-collapse-58" aria-expanded="false" aria-controls="sidebar-collapse-58">
                    <a href="58">1.         Mutable List Structure      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-59">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-57" href="#sidebar-collapse-59" aria-expanded="false" aria-controls="sidebar-collapse-59">
                    <a href="59">2.         Representing Queues      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-60">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-57" href="#sidebar-collapse-60" aria-expanded="false" aria-controls="sidebar-collapse-60">
                    <a href="60">3.         Representing Tables      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-61">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-57" href="#sidebar-collapse-61" aria-expanded="false" aria-controls="sidebar-collapse-61">
                    <a href="61">4.         A Simulator for Digital Circuits      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-62">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-57" href="#sidebar-collapse-62" aria-expanded="false" aria-controls="sidebar-collapse-62">
                    <a href="62">5.         Propagation of Constraints      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-63">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-63" aria-expanded="true" aria-controls="sidebar-collapse-63">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-63" aria-expanded="true" aria-controls="sidebar-collapse-63">
                    -
                  </a>
                    <a href="63">4. Concurrency: Time Is of the Essence</a>
                </h5>
              </div>
              <div id="sidebar-collapse-63" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-64">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-63" href="#sidebar-collapse-64" aria-expanded="false" aria-controls="sidebar-collapse-64">
                    <a href="64">1.         The Nature of Time in Concurrent Systems      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-65">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-63" href="#sidebar-collapse-65" aria-expanded="false" aria-controls="sidebar-collapse-65">
                    <a href="65">2.         Mechanisms for Controlling Concurrency      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-66">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-66" aria-expanded="true" aria-controls="sidebar-collapse-66">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-66" aria-expanded="true" aria-controls="sidebar-collapse-66">
                    -
                  </a>
                    <a href="66">5. Streams</a>
                </h5>
              </div>
              <div id="sidebar-collapse-66" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-67">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-66" href="#sidebar-collapse-67" aria-expanded="false" aria-controls="sidebar-collapse-67">
                    <a href="67">1.         Streams Are Delayed Lists      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-68">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-66" href="#sidebar-collapse-68" aria-expanded="false" aria-controls="sidebar-collapse-68">
                    <a href="68">2.         Infinite Streams      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-69">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-66" href="#sidebar-collapse-69" aria-expanded="false" aria-controls="sidebar-collapse-69">
                    <a href="69">3.   Exploiting the Stream Paradigm      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-70">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-66" href="#sidebar-collapse-70" aria-expanded="false" aria-controls="sidebar-collapse-70">
                    <a href="70">4.   Streams and Delayed Evaluation      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-71">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-66" href="#sidebar-collapse-71" aria-expanded="false" aria-controls="sidebar-collapse-71">
                    <a href="71">5.   Modularity of Functional Programs and Modularity of Objects      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-72">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-72" aria-expanded="true" aria-controls="sidebar-collapse-72">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-72" aria-expanded="true" aria-controls="sidebar-collapse-72">
                    -
                  </a>
                    <a href="72">4. Metalinguistic Abstraction</a>
                </h5>
              </div>
              <div id="sidebar-collapse-72" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-73">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-73" aria-expanded="true" aria-controls="sidebar-collapse-73">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-73" aria-expanded="true" aria-controls="sidebar-collapse-73">
                    -
                  </a>
                    <a href="73">1. The Metacircular Evaluator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-73" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-74">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-74" aria-expanded="false" aria-controls="sidebar-collapse-74">
                    <a href="74">1.   The Core of the Evaluator      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-75">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-75" aria-expanded="false" aria-controls="sidebar-collapse-75">
                    <a href="75">2.   Representing Statements and Expressions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-76">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-76" aria-expanded="false" aria-controls="sidebar-collapse-76">
                    <a href="76">3.   Evaluator Data Structures      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-77">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-77" aria-expanded="false" aria-controls="sidebar-collapse-77">
                    <a href="77">4.   Running the Evaluator as a Program      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-78">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-78" aria-expanded="false" aria-controls="sidebar-collapse-78">
                    <a href="78">5.   Data as Programs      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-79">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-79" aria-expanded="false" aria-controls="sidebar-collapse-79">
                    <a href="79">6.   Internal Definitions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-80">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-80" aria-expanded="false" aria-controls="sidebar-collapse-80">
                    <a href="80">7.   Separating Syntactic Analysis from Execution      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-81">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-81" aria-expanded="true" aria-controls="sidebar-collapse-81">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-81" aria-expanded="true" aria-controls="sidebar-collapse-81">
                    -
                  </a>
                    <a href="81">2. Variations on a SchemeLazy Evaluation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-81" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-82">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-81" href="#sidebar-collapse-82" aria-expanded="false" aria-controls="sidebar-collapse-82">
                    <a href="82">1.   Normal Order and Applicative Order      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-83">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-81" href="#sidebar-collapse-83" aria-expanded="false" aria-controls="sidebar-collapse-83">
                    <a href="83">2.   An Interpreter with Lazy Evaluation      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-84">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-81" href="#sidebar-collapse-84" aria-expanded="false" aria-controls="sidebar-collapse-84">
                    <a href="84">3.   Streams as Lazy Lists      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-85">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-85" aria-expanded="true" aria-controls="sidebar-collapse-85">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-85" aria-expanded="true" aria-controls="sidebar-collapse-85">
                    -
                  </a>
                    <a href="85">3. Variations on a SchemeNondeterministic Computing</a>
                </h5>
              </div>
              <div id="sidebar-collapse-85" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-86">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-85" href="#sidebar-collapse-86" aria-expanded="false" aria-controls="sidebar-collapse-86">
                    <a href="86">1.   Amb and Search      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-87">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-85" href="#sidebar-collapse-87" aria-expanded="false" aria-controls="sidebar-collapse-87">
                    <a href="87">2.   Examples of Nondeterministic Programs      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-88">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-85" href="#sidebar-collapse-88" aria-expanded="false" aria-controls="sidebar-collapse-88">
                    <a href="88">3.   Implementing the Amb Evaluator      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-89">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-89" aria-expanded="true" aria-controls="sidebar-collapse-89">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-89" aria-expanded="true" aria-controls="sidebar-collapse-89">
                    -
                  </a>
                    <a href="89">4. Logic Programming</a>
                </h5>
              </div>
              <div id="sidebar-collapse-89" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-90">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-89" href="#sidebar-collapse-90" aria-expanded="false" aria-controls="sidebar-collapse-90">
                    <a href="90">1.   Deductive Information Retrieval      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-91">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-89" href="#sidebar-collapse-91" aria-expanded="false" aria-controls="sidebar-collapse-91">
                    <a href="91">2.   How the Query System Works      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-92">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-89" href="#sidebar-collapse-92" aria-expanded="false" aria-controls="sidebar-collapse-92">
                    <a href="92">3.   Is Logic Programming Mathematical Logic?      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-93">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-89" href="#sidebar-collapse-93" aria-expanded="false" aria-controls="sidebar-collapse-93">
                    <a href="93">4.   Implementing the Query System      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-94">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-94" aria-expanded="true" aria-controls="sidebar-collapse-94">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-94" aria-expanded="true" aria-controls="sidebar-collapse-94">
                    -
                  </a>
                    <a href="94">5. Computing with Register Machines</a>
                </h5>
              </div>
              <div id="sidebar-collapse-94" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-95">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-95" aria-expanded="true" aria-controls="sidebar-collapse-95">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-95" aria-expanded="true" aria-controls="sidebar-collapse-95">
                    -
                  </a>
                    <a href="95">1. Designing Register Machines</a>
                </h5>
              </div>
              <div id="sidebar-collapse-95" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-96">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-95" href="#sidebar-collapse-96" aria-expanded="false" aria-controls="sidebar-collapse-96">
                    <a href="96">1.   A Language for Describing Register Machines      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-97">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-95" href="#sidebar-collapse-97" aria-expanded="false" aria-controls="sidebar-collapse-97">
                    <a href="97">2.   Abstraction in Machine Design      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-98">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-95" href="#sidebar-collapse-98" aria-expanded="false" aria-controls="sidebar-collapse-98">
                    <a href="98">3.   Subroutines      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-99">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-95" href="#sidebar-collapse-99" aria-expanded="false" aria-controls="sidebar-collapse-99">
                    <a href="99">4.   Using a Stack to Implement Recursion      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-100">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-95" href="#sidebar-collapse-100" aria-expanded="false" aria-controls="sidebar-collapse-100">
                    <a href="100">5.   Instruction Summary      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-101">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-101" aria-expanded="true" aria-controls="sidebar-collapse-101">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-101" aria-expanded="true" aria-controls="sidebar-collapse-101">
                    -
                  </a>
                    <a href="101">2. A Register-Machine Simulator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-101" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-102">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-101" href="#sidebar-collapse-102" aria-expanded="false" aria-controls="sidebar-collapse-102">
                    <a href="102">1.   The Machine Model      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-103">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-101" href="#sidebar-collapse-103" aria-expanded="false" aria-controls="sidebar-collapse-103">
                    <a href="103">2.   The Assembler      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-104">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-101" href="#sidebar-collapse-104" aria-expanded="false" aria-controls="sidebar-collapse-104">
                    <a href="104">3.   Generating Execution  Functions  for Instructions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-105">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-101" href="#sidebar-collapse-105" aria-expanded="false" aria-controls="sidebar-collapse-105">
                    <a href="105">4.   Monitoring Machine Performance      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-106">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-106" aria-expanded="true" aria-controls="sidebar-collapse-106">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-106" aria-expanded="true" aria-controls="sidebar-collapse-106">
                    -
                  </a>
                    <a href="106">3. Storage Allocation and Garbage Collection</a>
                </h5>
              </div>
              <div id="sidebar-collapse-106" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-107">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-106" href="#sidebar-collapse-107" aria-expanded="false" aria-controls="sidebar-collapse-107">
                    <a href="107">1.   Memory as Vectors      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-108">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-106" href="#sidebar-collapse-108" aria-expanded="false" aria-controls="sidebar-collapse-108">
                    <a href="108">2.   Maintaining the Illusion of Infinite Memory      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-109">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-109" aria-expanded="true" aria-controls="sidebar-collapse-109">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-109" aria-expanded="true" aria-controls="sidebar-collapse-109">
                    -
                  </a>
                    <a href="109">4. The Explicit-Control Evaluator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-109" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-110">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-109" href="#sidebar-collapse-110" aria-expanded="false" aria-controls="sidebar-collapse-110">
                    <a href="110">1.   The Core of the Explicit-Control Evaluator      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-111">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-109" href="#sidebar-collapse-111" aria-expanded="false" aria-controls="sidebar-collapse-111">
                    <a href="111">2.   Sequence Evaluation and Tail Recursion      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-112">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-109" href="#sidebar-collapse-112" aria-expanded="false" aria-controls="sidebar-collapse-112">
                    <a href="112">3.   Conditionals, Assignments, and Definitions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-113">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-109" href="#sidebar-collapse-113" aria-expanded="false" aria-controls="sidebar-collapse-113">
                    <a href="113">4.   Running the Evaluator      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-114">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-114" aria-expanded="true" aria-controls="sidebar-collapse-114">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-114" aria-expanded="true" aria-controls="sidebar-collapse-114">
                    -
                  </a>
                    <a href="114">5. Compilation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-114" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-115">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-115" aria-expanded="false" aria-controls="sidebar-collapse-115">
                    <a href="115">1.   Structure of the Compiler      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-116">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-116" aria-expanded="false" aria-controls="sidebar-collapse-116">
                    <a href="116">2.   Compiling Expressions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-117">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-117" aria-expanded="false" aria-controls="sidebar-collapse-117">
                    <a href="117">3.   Compiling Combinations      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-118">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-118" aria-expanded="false" aria-controls="sidebar-collapse-118">
                    <a href="118">4.   Combining Instruction Sequences      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-119">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-119" aria-expanded="false" aria-controls="sidebar-collapse-119">
                    <a href="119">5.   An Example of Compiled Code      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-120">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-120" aria-expanded="false" aria-controls="sidebar-collapse-120">
                    <a href="120">6.   Lexical Addressing      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-121">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-121" aria-expanded="false" aria-controls="sidebar-collapse-121">
                    <a href="121">7.   Interfacing Compiled Code to the Evaluator      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

          </div>

           <div class="chapter-content">
    <div class="chapter-title">
        2.4.3.
        Data-Directed Programming and Additivity
      
    </div>
    <div class="chapter-text" >
        <div class="SUBSECTION"><SUBSECTION>
      

      
      
      

      <p>
      
      The general strategy of checking the type of a datum and calling an
      appropriate
      function
      is called
      
      
      <EM>dispatching on type</EM>.  This is a
      powerful strategy for obtaining modularity in system design.  On
      the other hand, implementing the dispatch as in
      Section <REF NAME="sec:manifest-types"></REF> has two significant weaknesses.  One
      weakness is that the generic interface
      functions
      (<kbd>real_part</kbd>,
      <kbd>imag_part</kbd>, <kbd>magnitude</kbd>, and <kbd>angle</kbd>) must know about all
      the different representations.  For instance, suppose we wanted to
      incorporate a new representation for complex numbers into our
      complex-number system.  We would need to identify this new
      representation with a type, and then add a clause to each of the
      generic interface
      functions
      to check for the new type and apply the
      appropriate selector for that representation.
      </p>
      <p>
      Another weakness of the technique is that even though the individual
      representations can be designed separately, we must guarantee that
      no two
      functions
      in the entire system have the same name.  This is
      why Ben and Alyssa had to change the names of their original
      functions
      from Section <REF NAME="sec:representations-complex-numbers"></REF>.
      </p>
      <p>
      The issue underlying both of these weaknesses is that the technique
      for implementing generic interfaces is not <EM>additive</EM>.  The person
      implementing the generic selector
      functions
      must modify those
      functions
      each time a new representation is installed, and the people
      interfacing the individual representations must modify their
      code to avoid name conflicts.  In each of these cases, the changes
      that must be made to the code are straightforward, but they must be
      made nonetheless, and this is a source of inconvenience and error.
      This is not much of a problem for the complex-number system as it
      stands, but suppose there were not two but hundreds of different
      representations for complex numbers.  And suppose that there were many
      generic selectors to be maintained in the abstract-data interface.
      Suppose, in fact, that no one programmer knew all the interface
      functions
      or all the representations.  The problem is real and must
      be addressed in such programs as large-scale data-base-management
      systems.
      </p>
      <p>
      What we need is a means for modularizing the system design even
      further.  This is provided by the programming technique known as <EM>
        data-directed programming</EM>.  To understand how data-directed
      programming works, begin with the observation that whenever we deal
      with a set of generic operations that are common to a set of
      different types we are, in effect, dealing with a two-dimensional
      table that contains the possible operations on one axis and the
      possible types on the other axis.  The entries in the table are the
      functions
      that implement each operation for each type of argument
      presented.  In the complex-number system developed in the previous
      section, the correspondence between operation name, data type, and
      actual
      function
      was spread out among the various conditional clauses
      in the generic interface
      functions.  But the same information could
      have been organized in a table, as shown in
      Figure <REF NAME="fig:operator-table"></REF>.
      </p>
      <p>
      
      Data-directed programming is the technique of designing programs to
      work with such a table directly.  Previously, we implemented the
      mechanism that interfaces the complex-arithmetic code with the two
      representation packages as a set of
      functions
      that each perform an
      explicit dispatch on type.  Here we will implement the interface as a single
      function
      that looks up the combination of the operation name and
      argument type in
      the table to find the correct
      function
      to apply, and then applies it
      to the contents of the argument.  If we do this, then to add a new
      representation package to the system we need not change any existing
      functions; we need only add new entries to the table.
      </p>
      <p>

        <FIGURE>
        <SPLIT>
          
          
            <img src="img_tex/ch2_4_3-1.png">
          
        </SPLIT>
          <div class="chapter-text-CAPTION">Table of operations for the complex-number system.</div>
          
        </FIGURE>

      To implement this plan, assume that we have two
      functions,
      <kbd>put</kbd> and <kbd>get</kbd>, for manipulating the
      operation-and-type table:
      

      <UL>
        
        <LI>
<kbd>put(</kbd>$\langle \textit{op} \rangle, \langle \textit{type} \rangle, \langle \textit{item} \rangle$<kbd>)</kbd><BREAK></BREAK>
        installs the $\langle \textit{item} \rangle$ in the table, indexed by the
          $\langle \textit{op} \rangle$ and the
          $\langle \textit{type} \rangle$.
          
        </LI>
        <LI>
<kbd>get(</kbd>$\langle \textit{op} \rangle, \langle \textit{type} \rangle$<kbd>)</kbd><BREAK></BREAK>
          looks up the
          $\langle \textit{op} \rangle$,
          $\langle \textit{type} \rangle$
          entry in the table
          and returns the item found there.  If no item is found, <kbd>get</kbd>
          returns false.
        </LI>
      </UL>

      For now, we can assume that <kbd>put</kbd> and <kbd>get</kbd> are
      included in our language.  In Chapter 3 (Section <REF NAME="sec:tables"></REF>)
      we will see how to implement these and
      other operations for manipulating tables.
      </p>
      <p>
      Here is how data-directed programming can be used in the
      complex-number system.  Ben, who developed the rectangular
      representation, implements his code just as he did originally.  He defines a collection of
      functions, or a
      
      <EM>package</EM>, and interfaces
      these to the rest of the system by adding entries to the table that
      tell the system how to operate on rectangular numbers.
      This is accomplished by calling the following
      function:
      
      

      <div class="snippet" id="javascript_42_0_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function install_rectangular_package() {\n   function real_part(z) { return head(z); }\n   function imag_part(z) { return tail(z); }\n   function make_from_real_imag(x,y) { return pair(x,y); }\n   function magnitude(z) {\n      return sqrt(square(real_part(z)) +\n                  square(imag_part(z)));\n   }\n   function angle(z) {\n      return atan(imag_part(z),real_part(z));\n   }\n   function make_from_mag_ang(r,a) {\n      return pair(r * cos(a), r * sin(a));\n   }\n   // interface to the rest of the system\n   function tag(x) {\n      return attach_tag(&quot;rectangular&quot;,x);\n   }\n   put(&quot;real_part&quot;, list(&quot;rectangular&quot;), real_part);\n   put(&quot;imag_part&quot;, list(&quot;rectangular&quot;), imag_part);\n   put(&quot;magnitude&quot;, list(&quot;rectangular&quot;), magnitude);\n   put(&quot;angle&quot;, list(&quot;rectangular&quot;), angle);\n   put(&quot;make_from_real_imag&quot;, &quot;rectangular&quot;,\n       function(x,y) { return tag(make_from_real_imag(x,y)); });\n   put(&quot;make_from_mag_ang&quot;, &quot;rectangular&quot;,\n       function(r,a) { return tag(make_from_mag_ang(r,a)); });\n   return &quot;done&quot;;\n}','javascript_42_0','', event,1.0);window.eval('');">function install_rectangular_package() {
   function real_part(z) { return head(z); }
   function imag_part(z) { return tail(z); }
   function make_from_real_imag(x,y) { return pair(x,y); }
   function magnitude(z) {
      return sqrt(square(real_part(z)) +
                  square(imag_part(z)));
   }
   function angle(z) {
      return atan(imag_part(z),real_part(z));
   }
   function make_from_mag_ang(r,a) {
      return pair(r * cos(a), r * sin(a));
   }
   // interface to the rest of the system
   function tag(x) {
      return attach_tag("rectangular",x);
   }
   put("real_part", list("rectangular"), real_part);
   put("imag_part", list("rectangular"), imag_part);
   put("magnitude", list("rectangular"), magnitude);
   put("angle", list("rectangular"), angle);
   put("make_from_real_imag", "rectangular",
       function(x,y) { return tag(make_from_real_imag(x,y)); });
   put("make_from_mag_ang", "rectangular",
       function(r,a) { return tag(make_from_mag_ang(r,a)); });
   return "done";
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20install_rectangular_package()%20%7B%0A%20%20%20function%20real_part(z)%20%7B%20return%20head(z);%20%7D%0A%20%20%20function%20imag_part(z)%20%7B%20return%20tail(z);%20%7D%0A%20%20%20function%20make_from_real_imag(x,y)%20%7B%20return%20pair(x,y);%20%7D%0A%20%20%20function%20magnitude(z)%20%7B%0A%20%20%20%20%20%20return%20sqrt(square(real_part(z))%20+%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20square(imag_part(z)));%0A%20%20%20%7D%0A%20%20%20function%20angle(z)%20%7B%0A%20%20%20%20%20%20return%20atan(imag_part(z),real_part(z));%0A%20%20%20%7D%0A%20%20%20function%20make_from_mag_ang(r,a)%20%7B%0A%20%20%20%20%20%20return%20pair(r%20*%20cos(a),%20r%20*%20sin(a));%0A%20%20%20%7D%0A%20%20%20//%20interface%20to%20the%20rest%20of%20the%20system%0A%20%20%20function%20tag(x)%20%7B%0A%20%20%20%20%20%20return%20attach_tag(%22rectangular%22,x);%0A%20%20%20%7D%0A%20%20%20put(%22real_part%22,%20list(%22rectangular%22),%20real_part);%0A%20%20%20put(%22imag_part%22,%20list(%22rectangular%22),%20imag_part);%0A%20%20%20put(%22magnitude%22,%20list(%22rectangular%22),%20magnitude);%0A%20%20%20put(%22angle%22,%20list(%22rectangular%22),%20angle);%0A%20%20%20put(%22make_from_real_imag%22,%20%22rectangular%22,%0A%20%20%20%20%20%20%20function(x,y)%20%7B%20return%20tag(make_from_real_imag(x,y));%20%7D);%0A%20%20%20put(%22make_from_mag_ang%22,%20%22rectangular%22,%0A%20%20%20%20%20%20%20function(r,a)%20%7B%20return%20tag(make_from_mag_ang(r,a));%20%7D);%0A%20%20%20return%20%22done%22;%0A%7D&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

      Notice that the internal
      functions
      here are the same
      functions
      from
      Section <REF NAME="sec:representations-complex-numbers"></REF> that Ben wrote when
      he was working in isolation.  No changes are necessary in order to
      interface them to the rest of the system.  Moreover, since these
      function
      definitions are internal to the installation
      function, Ben
      needn't worry about name conflicts with other
      functions
      outside the
      rectangular package.  To interface these to the rest of the system,
      Ben installs his <kbd>real_part</kbd>
      function
      under the operation name
      <kbd>real_part</kbd> and the type <kbd>list("rectangular")</kbd>, and similarly
      for the other selectors.<a class="superscript" id="footnote-link-1" href="42#footnote-1">[1]</a>  The interface also defines
      the constructors to be used by the external system.<a class="superscript" id="footnote-link-2" href="42#footnote-2">[2]</a>
      These are
      identical to Ben's internally defined constructors, except that they
      attach the tag.

      
      
      Alyssa's polar package is analogous:
      <div class="snippet" id="javascript_42_1_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function install_polar_package() {\n   // internal functions\n   function magnitude(z) { return head(z); }\n   function angle(z) { return tail(z); }\n   function make_from_mag_ang(r,a) { return pair(r,a); }\n   function real_part(z) {\n      return magnitude(z) * cos(angle(z));\n   }\n   function imag_part(z) {\n      return magnitude(z) * sin(angle(z));\n   }\n   function make_from_real_imag(x,y) {\n      return pair(sqrt(square(x) + square(y)),\n                  atan(y,x));\n   }\n\n   // interface to teh rest of the system\n   function tag(x) { return attach_tag(&quot;polar&quot;,x); }\n   put(&quot;real_part&quot;,list(&quot;polar&quot;),real_part);\n   put(&quot;imag_part&quot;,list(&quot;polar&quot;),imag_part);\n   put(&quot;magnitude&quot;,list(&quot;polar&quot;),magnitude);\n   put(&quot;angle&quot;,list(&quot;polar&quot;),angle);\n   put(&quot;make_from_real_imag&quot;, &quot;polar&quot;,\n       function(x,y) { return tag(make_from_real_imag(x,y)); });\n   put(&quot;make_from_mag_ang&quot;, &quot;polar&quot;,\n       function(r,a) { return tag(make_from_mag_ang(r,a)); });\n}','javascript_42_1','', event,1.0);window.eval('');">function install_polar_package() {
   // internal functions
   function magnitude(z) { return head(z); }
   function angle(z) { return tail(z); }
   function make_from_mag_ang(r,a) { return pair(r,a); }
   function real_part(z) {
      return magnitude(z) * cos(angle(z));
   }
   function imag_part(z) {
      return magnitude(z) * sin(angle(z));
   }
   function make_from_real_imag(x,y) {
      return pair(sqrt(square(x) + square(y)),
                  atan(y,x));
   }

   // interface to teh rest of the system
   function tag(x) { return attach_tag("polar",x); }
   put("real_part",list("polar"),real_part);
   put("imag_part",list("polar"),imag_part);
   put("magnitude",list("polar"),magnitude);
   put("angle",list("polar"),angle);
   put("make_from_real_imag", "polar",
       function(x,y) { return tag(make_from_real_imag(x,y)); });
   put("make_from_mag_ang", "polar",
       function(r,a) { return tag(make_from_mag_ang(r,a)); });
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20install_polar_package()%20%7B%0A%20%20%20//%20internal%20functions%0A%20%20%20function%20magnitude(z)%20%7B%20return%20head(z);%20%7D%0A%20%20%20function%20angle(z)%20%7B%20return%20tail(z);%20%7D%0A%20%20%20function%20make_from_mag_ang(r,a)%20%7B%20return%20pair(r,a);%20%7D%0A%20%20%20function%20real_part(z)%20%7B%0A%20%20%20%20%20%20return%20magnitude(z)%20*%20cos(angle(z));%0A%20%20%20%7D%0A%20%20%20function%20imag_part(z)%20%7B%0A%20%20%20%20%20%20return%20magnitude(z)%20*%20sin(angle(z));%0A%20%20%20%7D%0A%20%20%20function%20make_from_real_imag(x,y)%20%7B%0A%20%20%20%20%20%20return%20pair(sqrt(square(x)%20+%20square(y)),%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20atan(y,x));%0A%20%20%20%7D%0A%0A%20%20%20//%20interface%20to%20teh%20rest%20of%20the%20system%0A%20%20%20function%20tag(x)%20%7B%20return%20attach_tag(%22polar%22,x);%20%7D%0A%20%20%20put(%22real_part%22,list(%22polar%22),real_part);%0A%20%20%20put(%22imag_part%22,list(%22polar%22),imag_part);%0A%20%20%20put(%22magnitude%22,list(%22polar%22),magnitude);%0A%20%20%20put(%22angle%22,list(%22polar%22),angle);%0A%20%20%20put(%22make_from_real_imag%22,%20%22polar%22,%0A%20%20%20%20%20%20%20function(x,y)%20%7B%20return%20tag(make_from_real_imag(x,y));%20%7D);%0A%20%20%20put(%22make_from_mag_ang%22,%20%22polar%22,%0A%20%20%20%20%20%20%20function(r,a)%20%7B%20return%20tag(make_from_mag_ang(r,a));%20%7D);%0A%7D&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
      </p>
      <p>
      Even though Ben and Alyssa both still use their original
      functions
      defined with the same names as each other's (e.g., <kbd>real_part</kbd>), these
      definitions are now internal to different
      functions
      (see
      Section <REF NAME="sec:block-structure"></REF>), so there is no name
      conflict.
      </p>
      <p>
      The complex-arithmetic selectors access the table by means of a
      general <QUOTE>operation</QUOTE>
      function
      called <kbd>apply_generic</kbd>, which
      applies a generic operation to some arguments.  The function <kbd>apply_generic</kbd>
      looks in the table under the name of the operation and the types of the
      arguments and applies the resulting
      function
      if one is present:<a class="superscript" id="footnote-link-3" href="42#footnote-3">[3]</a>

      <div class="snippet" id="javascript_42_2_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function apply_generic(op,args) {\n   var type_tags = map(type_tag,args);\n   var fun = get(op,type_tags);\n   if (fun != false)\n      return fun(map(contents,args));\n   else\n      return error(&quot;No method for these types -- apply_generic&quot;,\n                   list(op,type_tags));\n}','javascript_42_2','', event,1.0);window.eval('');">function apply_generic(op,args) {
   var type_tags = map(type_tag,args);
   var fun = get(op,type_tags);
   if (fun != false)
      return fun(map(contents,args));
   else
      return error("No method for these types -- apply_generic",
                   list(op,type_tags));
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20apply_generic(op,args)%20%7B%0A%20%20%20var%20type_tags%20=%20map(type_tag,args);%0A%20%20%20var%20fun%20=%20get(op,type_tags);%0A%20%20%20if%20(fun%20!=%20false)%0A%20%20%20%20%20%20return%20fun(map(contents,args));%0A%20%20%20else%0A%20%20%20%20%20%20return%20error(%22No%20method%20for%20these%20types%20--%20apply_generic%22,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20list(op,type_tags));%0A%7D&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
      Using <kbd>apply_generic</kbd>, we can define our generic selectors as follows:

      <div class="snippet" id="javascript_42_3_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function real_part(z) {\n   return apply_generic(&quot;real_part&quot;,list(z));\n}\nfunction imag_part(z) {\n   return apply_generic(&quot;imag_part&quot;,list(z));\n}\nfunction magnitude(z) {\n   return apply_generic(&quot;magnitude&quot;,list(z));\n}\nfunction angle(z) {\n   return apply_generic(&quot;angle&quot;,list(z));\n}','javascript_42_3','', event,1.0);window.eval('');">function real_part(z) {
   return apply_generic("real_part",list(z));
}
function imag_part(z) {
   return apply_generic("imag_part",list(z));
}
function magnitude(z) {
   return apply_generic("magnitude",list(z));
}
function angle(z) {
   return apply_generic("angle",list(z));
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20real_part(z)%20%7B%0A%20%20%20return%20apply_generic(%22real_part%22,list(z));%0A%7D%0Afunction%20imag_part(z)%20%7B%0A%20%20%20return%20apply_generic(%22imag_part%22,list(z));%0A%7D%0Afunction%20magnitude(z)%20%7B%0A%20%20%20return%20apply_generic(%22magnitude%22,list(z));%0A%7D%0Afunction%20angle(z)%20%7B%0A%20%20%20return%20apply_generic(%22angle%22,list(z));%0A%7D&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

      Observe that these do not change at all if a new representation is
      added to the system.
      </p>
      <p>
      We can also extract from the table the
      constructors to be used by the programs external to the packages in
      making complex numbers from real and imaginary parts and from
      magnitudes and angles.
      As in Section <REF NAME="sec:manifest-types"></REF>, we
      construct rectangular numbers whenever we have real and
      imaginary parts, and polar numbers whenever we have magnitudes and angles:

      <div class="snippet" id="javascript_42_4_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function make_from_real_imag(x,y) {\n   return get(&quot;make_from_real_imag&quot;,&quot;rectangular&quot;)(x,y);\n}\nfunction make_from_mag_ang(r,a) {\n   return get(&quot;make_from_mag_ang&quot;,&quot;polar&quot;)(r,a);\n}','javascript_42_4','', event,1.0);window.eval('');">function make_from_real_imag(x,y) {
   return get("make_from_real_imag","rectangular")(x,y);
}
function make_from_mag_ang(r,a) {
   return get("make_from_mag_ang","polar")(r,a);
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20make_from_real_imag(x,y)%20%7B%0A%20%20%20return%20get(%22make_from_real_imag%22,%22rectangular%22)(x,y);%0A%7D%0Afunction%20make_from_mag_ang(r,a)%20%7B%0A%20%20%20return%20get(%22make_from_mag_ang%22,%22polar%22)(r,a);%0A%7D&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
      </p>

      <EXERCISE>
        Section <REF NAME="sec:symbolic-differentiation"></REF> described a program that
        performs symbolic differentiation:
        
        
        <div class="snippet" id="javascript_42_5_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function deriv(exp,var) {\n   if (is_number(exp))\n      return 0;\n   else if (is_variable(exp))\n      return (is_same_variable(exp,var)) ? 1 : 0;\n   else if (is_sum(exp))\n      return make_sum(deriv(addend(exp),var),\n                      deriv(augend(exp),var));\n   else if (is_product(exp))\n      return make_sum(make_product(multiplier(exp),\n                                   deriv(multiplicand(exp),variable)),\n                      make_product(deriv(multiplier(exp),variable),\n                                   multiplicand(exp)));\n   // more rules can be added here\n   else\n      return error(&quot;unknown expression type -- deriv&quot;,exp);\n}','javascript_42_5','', event,1.0);window.eval('');">function deriv(exp,var) {
   if (is_number(exp))
      return 0;
   else if (is_variable(exp))
      return (is_same_variable(exp,var)) ? 1 : 0;
   else if (is_sum(exp))
      return make_sum(deriv(addend(exp),var),
                      deriv(augend(exp),var));
   else if (is_product(exp))
      return make_sum(make_product(multiplier(exp),
                                   deriv(multiplicand(exp),variable)),
                      make_product(deriv(multiplier(exp),variable),
                                   multiplicand(exp)));
   // more rules can be added here
   else
      return error("unknown expression type -- deriv",exp);
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20deriv(exp,var)%20%7B%0A%20%20%20if%20(is_number(exp))%0A%20%20%20%20%20%20return%200;%0A%20%20%20else%20if%20(is_variable(exp))%0A%20%20%20%20%20%20return%20(is_same_variable(exp,var))%20?%201%20:%200;%0A%20%20%20else%20if%20(is_sum(exp))%0A%20%20%20%20%20%20return%20make_sum(deriv(addend(exp),var),%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deriv(augend(exp),var));%0A%20%20%20else%20if%20(is_product(exp))%0A%20%20%20%20%20%20return%20make_sum(make_product(multiplier(exp),%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deriv(multiplicand(exp),variable)),%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20make_product(deriv(multiplier(exp),variable),%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20multiplicand(exp)));%0A%20%20%20//%20more%20rules%20can%20be%20added%20here%0A%20%20%20else%0A%20%20%20%20%20%20return%20error(%22unknown%20expression%20type%20--%20deriv%22,exp);%0A%7D&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        We can regard this program as performing a dispatch on the type of the
        expression to be differentiated.  In this situation the <QUOTE>type tag</QUOTE> of the
          datum is the algebraic operator symbol (such as +) and the
          operation being performed is <kbd>deriv</kbd>.  We can transform this
        program into data-directed style by rewriting the basic derivative
        function
        as
        <div class="snippet" id="javascript_42_6_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function deriv(exp,var) {\n   if (is_number(exp))\n      return 0;\n   else if (is_variable(exp))\n      return (is_same_variable(exp,var)) ? 1 : 0;\n   else\n      return get(&quot;deriv&quot;,operator(exp))(operands(exp),var);\n}\nfunction operator(exp) {\n   return head(exp);\n}\nfunction operands(exp) {\n   return tail(exp);\n}','javascript_42_6','', event,1.0);window.eval('');">function deriv(exp,var) {
   if (is_number(exp))
      return 0;
   else if (is_variable(exp))
      return (is_same_variable(exp,var)) ? 1 : 0;
   else
      return get("deriv",operator(exp))(operands(exp),var);
}
function operator(exp) {
   return head(exp);
}
function operands(exp) {
   return tail(exp);
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20deriv(exp,var)%20%7B%0A%20%20%20if%20(is_number(exp))%0A%20%20%20%20%20%20return%200;%0A%20%20%20else%20if%20(is_variable(exp))%0A%20%20%20%20%20%20return%20(is_same_variable(exp,var))%20?%201%20:%200;%0A%20%20%20else%0A%20%20%20%20%20%20return%20get(%22deriv%22,operator(exp))(operands(exp),var);%0A%7D%0Afunction%20operator(exp)%20%7B%0A%20%20%20return%20head(exp);%0A%7D%0Afunction%20operands(exp)%20%7B%0A%20%20%20return%20tail(exp);%0A%7D&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        <OL>
          <LI>
            Explain what was done above.
            Why can't we assimilate the predicates <kbd>is_number</kbd> and <kbd>is_same_variable</kbd> into the data-directed dispatch?
          </LI>
          <LI>
            Write the
            functions
            for derivatives of sums and products, and the
            auxiliary code required to install them in the table used by the
            program above.
          </LI>
          <LI>
            Choose any additional differentiation rule that you like, such as
            the one for exponents (Exercise <REF NAME="ex:deriv-exponentiation"></REF>),
            and install it in this data-directed system.
          </LI>
          <LI>
            In this simple algebraic manipulator the type of an expression is
            the algebraic operator that binds it together.  Suppose, however, we
            indexed the
            functions
            in the opposite way, so that the dispatch line
            in <kbd>deriv</kbd> looked like

            <div class="snippet" id="javascript_42_7_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('get(operator(exp),&quot;deriv&quot;)(operands(exp),var)','javascript_42_7','', event,1.0);window.eval('');">get(operator(exp),"deriv")(operands(exp),var)</pre>
<a href="http://source-ide-new.surge.sh/?snippet=get(operator(exp),%22deriv%22)(operands(exp),var)&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

            What corresponding changes to the derivative system are required?
          </LI>
        </OL>
        
      </EXERCISE>

      <EXERCISE>
        
        
        Insatiable Enterprises, Inc., is a highly decentralized conglomerate
        company consisting of a large number of independent divisions located
        all over the world.  The company's computer facilities have just been
        interconnected by means of a clever network-interfacing scheme that
        makes the entire network appear to any user to be a single computer.
        Insatiable's president, in her first attempt to exploit the ability of
        the network to extract administrative information from division files,
        is dismayed to discover that, although all the division files have
        been implemented as data structures in Scheme, the particular data
        structure used varies from division to division.  A meeting of
        division managers is hastily called to search for a strategy to
        integrate the files that will satisfy headquarters' needs while
        preserving the existing autonomy of the divisions.

        Show how such a strategy can be implemented with data-directed
        programming.  As an example, suppose that each division's personnel
        records consist of a single file, which contains a set of records
        keyed on employees' names.  The structure of the set varies from
        division to division.  Furthermore, each employee's record is itself a
        set (structured differently from division to division) that contains
        information keyed under identifiers such as <kbd>address</kbd> and <kbd>salary</kbd>.  In particular:
        <OL>
          <LI>
            Implement for headquarters a <kbd>get_record</kbd>
            function
            that
            retrieves a specified employee's record from a specified personnel
            file.  The
            function
            should be applicable to any division's file.
            Explain how the individual divisions' files should be structured.  In
            particular, what type information must be supplied?
          </LI>
          <LI>
            Implement for headquarters a <kbd>get_salary</kbd>
            function
            that
            returns the salary information from a given employee's record from any
            division's personnel file.  How should the record be structured in
            order to make this operation work?
          </LI>
          <LI>
            Implement for headquarters a <kbd>find_employee_record</kbd>
            function.
            This should search all the divisions' files for the record of a given
            employee and return the record.  Assume that this
            function
            takes as
            arguments an employee's name and a list of all the divisions' files.
          </LI>
          <LI>
            When Insatiable takes over a new company, what changes must
            be made in order to incorporate the new personnel information into the
            central system?
          </LI>
        </OL>
      </EXERCISE>
      
      


      <h2>
        Message passing
      </h2>

      

      <p>
      The key idea of data-directed programming is to handle generic
      operations in programs by dealing explicitly with operation-and-type
      tables, such as the table in Figure <REF NAME="fig:operator-table"></REF>.  The
      style of programming we used in Section <REF NAME="sec:manifest-types"></REF>
      organized the required dispatching on type by having each operation
      take care of its own dispatching.  In effect, this decomposes the
      operation-and-type table into rows, with each generic operation
      function
      representing a row of the table.
      </p>
      <p>
      An alternative implementation strategy is to decompose the table into
      columns and, instead of using <QUOTE>intelligent operations</QUOTE> that dispatch
      on data types, to work with <QUOTE>intelligent data objects</QUOTE> that dispatch
      on operation names.  We can do this by arranging things so that a data
      object, such as a rectangular number, is represented as a
      function
      that takes as input the required operation name and performs the
      operation indicated.  In such a discipline, <kbd>make_from_real_imag</kbd>
      could be written as

      <div class="snippet" id="javascript_42_8_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function make_from_real_imag(x,y) {\n   function dispatch(op) {\n      if (op === &quot;real_part&quot;)\n         return x;\n      else if (op === &quot;imag_part&quot;)\n         return y;\n      else if (op === &quot;magnitude&quot;)\n         return sqrt(square(x) + square(y));\n      else if (op === &quot;angle&quot;)\n         return atan(y,x);\n      else\n         return error(&quot;Unknown op -- make_from_real_imag&quot;,op);\n  }\n  return dispatch;\n}','javascript_42_8','', event,1.0);window.eval('');">function make_from_real_imag(x,y) {
   function dispatch(op) {
      if (op === "real_part")
         return x;
      else if (op === "imag_part")
         return y;
      else if (op === "magnitude")
         return sqrt(square(x) + square(y));
      else if (op === "angle")
         return atan(y,x);
      else
         return error("Unknown op -- make_from_real_imag",op);
  }
  return dispatch;
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20make_from_real_imag(x,y)%20%7B%0A%20%20%20function%20dispatch(op)%20%7B%0A%20%20%20%20%20%20if%20(op%20===%20%22real_part%22)%0A%20%20%20%20%20%20%20%20%20return%20x;%0A%20%20%20%20%20%20else%20if%20(op%20===%20%22imag_part%22)%0A%20%20%20%20%20%20%20%20%20return%20y;%0A%20%20%20%20%20%20else%20if%20(op%20===%20%22magnitude%22)%0A%20%20%20%20%20%20%20%20%20return%20sqrt(square(x)%20+%20square(y));%0A%20%20%20%20%20%20else%20if%20(op%20===%20%22angle%22)%0A%20%20%20%20%20%20%20%20%20return%20atan(y,x);%0A%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20return%20error(%22Unknown%20op%20--%20make_from_real_imag%22,op);%0A%20%20%7D%0A%20%20return%20dispatch;%0A%7D&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

      The corresponding <kbd>apply_generic</kbd>
      function, which applies a
      generic operation to an argument, now simply feeds the operation's
      name to the data object and lets the object do the work:<a class="superscript" id="footnote-link-4" href="42#footnote-4">[4]</a>

      <div class="snippet" id="javascript_42_9_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function apply_generic(op,arg) {\n   return head(arg)(op);\n}','javascript_42_9','', event,1.0);window.eval('');">function apply_generic(op,arg) {
   return head(arg)(op);
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20apply_generic(op,arg)%20%7B%0A%20%20%20return%20head(arg)(op);%0A%7D&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

      Note that the value returned by <kbd>make_from_real_imag</kbd> is a
      function—the internal <kbd>dispatch</kbd>
      function.  This is the
      function
      that is invoked when <kbd>apply_generic</kbd> requests an operation to
      be performed.
      </p>
      <p>
      This style of programming is called <EM>message passing</EM>.  The name
      comes from the image that a data object is an entity that receives the
      requested operation name as a <QUOTE>message.</QUOTE>  We have already seen an
      example of message passing in Section <REF NAME="sec:data?"></REF>, where we saw
      how <kbd>pair</kbd>, <kbd>head</kbd>, and <kbd>tail</kbd> could be defined with no data
      objects but only
      functions.  Here we see that message passing is not
      a mathematical trick but a useful technique for organizing systems
      with generic operations.  In the remainder of this chapter we will
      continue to use data-directed programming, rather than message
      passing, to discuss generic arithmetic operations.  In Chapter 3 we
      will return to message passing, and we will see that it can be a
      powerful tool for structuring simulation programs.
      </p>

      <EXERCISE>
        
        Implement the constructor <kbd>make-from-mag-ang</kbd> in message-passing style.
        This
        function
        should be analogous to the <kbd>make_from_real_imag</kbd>
        function
        given above.
      </EXERCISE>

      <EXERCISE>
        
        As a large system with generic operations evolves, new types of data
        objects or new operations may be needed.  For each of the three
        strategies—generic operations with explicit dispatch, data-directed
        style, and message-passing-style—describe the changes that must be
        made to a system in order to add new types or new operations.  Which
        organization would be most appropriate for a system in which new types
        must often be added?  Which would be most appropriate for a system in
        which new operations must often be added?
        
      </EXERCISE>

    <hr>
<div class="footnote">
<a class="footnote-number" id="footnote-1" href="42#footnote-link-1">[1] </a><FOOTNOTE>We use the list <kbd>list("rectangular")</kbd>
        rather than the string <kbd>"rectangular"</kbd> to allow for the possibility
        of operations with multiple arguments, not all of the same
        type.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-2" href="42#footnote-link-2">[2] </a><FOOTNOTE>The
        type the constructors are installed under needn't be a list because
        a constructor is always used to make an object of one particular
        type.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-3" href="42#footnote-link-3">[3] </a><FOOTNOTE>The function <kbd>apply_generic</kbd> uses the
        
        dotted-tail notation described in
        Exercise <REF NAME="ex:dotted-arglist"></REF>, because different generic operations
        may take different numbers of arguments.  In <kbd>apply_generic</kbd>, <kbd>op</kbd> has as its value the first argument to <kbd>apply_generic</kbd> and
        <kbd>args</kbd> has as its value a list of the remaining arguments.
        <BREAK></BREAK>
        The function <kbd>apply_generic</kbd> also uses the primitive
        function

        
        
        <kbd>apply</kbd>,
        which takes two arguments, a
        function
        and a list.  The function <kbd>apply</kbd>
        applies the
        function, using the elements in the list as arguments.
        For example,
        <div class="snippet" id="javascript_42_10_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('apply(sum_of_squares,list(1,3))','javascript_42_10','', event,1.0);window.eval('');">apply(sum_of_squares,list(1,3))</pre>
<a href="http://source-ide-new.surge.sh/?snippet=apply(sum_of_squares,list(1,3))&amp;hidden=" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
        returns 10.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-4" href="42#footnote-link-4">[4] </a><FOOTNOTE>One
        limitation of this organization is it permits only generic
        functions
        of one argument.</FOOTNOTE>
</div></SUBSECTION></div>
    </div>

    <div class="nav">
    <!--
      <div type="button" class="btn btn-secondary">
        <a href="http://localhost:3000/chapters/41">&lt; Previous</a>
    </div>
    -->
      <div type="button" class="btn btn-secondary">
        <a class="scroll-next" href="43">Next &gt;</a>
      </div>


  </div>
  <script>
//<![CDATA[
var chapter_id = 42;
//]]>
</script>
  <div class="next-page"></div>
</div>

     </div><!-- /.container -->

     <!--<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>
     -->
   </body>
</html>
