<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SicpTextbookRails</title>
    <meta name="csrf-param" content="authenticity_token" />
<meta name="csrf-token" content="84Z74kFodaRWD8kb3M4BQVrM6R2ruBwzDhy9aGImTewPDCtrXSt0vPAkWy9IGYuLvCSBS5VeeFdPaI3SIyJkAg==" />

    <!--<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">
    -->
    <link href="https://fonts.googleapis.com/css?family=Droid+Sans|Droid+Sans+Mono|Droid+Serif" rel="stylesheet">
    <link rel="stylesheet" media="all" href="../assets/application-4afa0dc75ea8a2ff925eb41df709aa5f5fae6640df639d9b6ae50ed06be5a5d2.css" />

    <link rel="shortcut icon" type="image/x-icon" href="../assets/favicon-5cc7f923fb946d60fe9552847f4b6edd0f8cf2f122d6f3fef39d59ce84d47942.ico" />

    <script src="https://code.jquery.com/jquery-3.2.1.min.js"
			  integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
	          crossorigin="anonymous">
    </script>
    <script src="http://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>
    <script type="text/javascript" async
        src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML">
    </script>

    <script src="../assets/application-e1d34c17f2d1680f21b650089aea08e3ecfe292f1157f2d23bfa7d4d9d530c8b.js"></script>

    <!-- Rendering inline LaTeX -->
    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({
        tex2jax: {
          inlineMath: [ ['$','$'], ["\\(","\\)"] ],
          processEscapes: true,
          jax: ["input/TeX","output/HTML-CSS"]
        }
      });
    </script>
    <!--<script src="/mathjax/MathJax.js?config=TeX-AMS_HTML-full.js" type="text/javascript"></script>-->
    <!-- Le HTML5 shim, for IE6-8 support of HTML elements -->
    <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.2/html5shiv.min.js" type="text/javascript"></script>
    <![endif]-->
  </head>
  <body>

     <nav class="navbar navbar-toggleable-md navbar-inverse bg-inverse fixed-top">
      <button class="navbar-toggler collapsed" type="button" data-toggle="collapse" data-target="#nav-sidebar" aria-controls="nav-sidebar" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
       <a class="navbar-brand navbar-brand-short" href="../chapters">CS1101S: SICP</a>
       <a class="navbar-brand navbar-brand-long" href="../chapters">CS1101S: Structure and Interpretation
          of Computer Programs</a>

       <div class="collapse navbar-collapse" id="navbarsExampleDefault">
         <form id="search" class="form-inline my-2 my-lg-0">
           <input id="search-box" class="form-control mr-sm-2" type="text" placeholder="Search">
           <div id="search-button" class="btn btn-outline-success my-2 my-sm-0">Search</div>

           <script>
               (function() {
                var cx = "002429487986305006822:ztnrbwx01qy";
                var gcse = document.createElement('script');
                gcse.type = 'text/javascript';
                gcse.async = true;
                gcse.src = 'https://cse.google.com/cse.js?cx=' + cx;
                var s = document.getElementsByTagName('script')[0];
                s.parentNode.insertBefore(gcse, s);
               })();
            </script>
            <gcse:search></gcse:search>
         </form>
       </div>
     </nav>

     <div class="container scroll">

          <div class="collapse" id="nav-sidebar" role="tablist" aria-multiselectable="true">
                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-122">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-122" aria-expanded="false" aria-controls="sidebar-collapse-122">
                    <a href="122">About</a>
                  </a>
                </h5>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-123">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-123" aria-expanded="false" aria-controls="sidebar-collapse-123">
                    <a href="123">References</a>
                  </a>
                </h5>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-124">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-124" aria-expanded="false" aria-controls="sidebar-collapse-124">
                    <a href="124">Webpreface</a>
                  </a>
                </h5>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-1">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-1" aria-expanded="true" aria-controls="sidebar-collapse-1">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-1" aria-expanded="true" aria-controls="sidebar-collapse-1">
                    -
                  </a>
                    <a href="1">1.       Building Abstractions with       Functions    </a>
                </h5>
              </div>
              <div id="sidebar-collapse-1" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-2">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-2" aria-expanded="true" aria-controls="sidebar-collapse-2">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-2" aria-expanded="true" aria-controls="sidebar-collapse-2">
                    -
                  </a>
                    <a href="2">1. The Elements of Programming</a>
                </h5>
              </div>
              <div id="sidebar-collapse-2" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-3">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-3" aria-expanded="false" aria-controls="sidebar-collapse-3">
                    <a href="3">1. Expressions</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-4">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-4" aria-expanded="false" aria-controls="sidebar-collapse-4">
                    <a href="4">2. Naming and the Environment</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-5">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-5" aria-expanded="false" aria-controls="sidebar-collapse-5">
                    <a href="5">3.           Evaluating          Operator Combinations                  </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-6">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-6" aria-expanded="false" aria-controls="sidebar-collapse-6">
                    <a href="6">4.           Functions        </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-7">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-7" aria-expanded="false" aria-controls="sidebar-collapse-7">
                    <a href="7">5.           The Substitution Model for                                                 Function                              Application        </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-8">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-8" aria-expanded="false" aria-controls="sidebar-collapse-8">
                    <a href="8">6.           Conditional                                           Statements                              and Predicates        </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-9">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-9" aria-expanded="false" aria-controls="sidebar-collapse-9">
                    <a href="9">7. Example: Square Roots by Newtons Method</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-10">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-2" href="#sidebar-collapse-10" aria-expanded="false" aria-controls="sidebar-collapse-10">
                    <a href="10">8.                                                 Functions                                as Black-Box Abstractions        </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-11">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-11" aria-expanded="true" aria-controls="sidebar-collapse-11">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-11" aria-expanded="true" aria-controls="sidebar-collapse-11">
                    -
                  </a>
                    <a href="11">2.             Functions            and the Processes They Generate      </a>
                </h5>
              </div>
              <div id="sidebar-collapse-11" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-12">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-12" aria-expanded="false" aria-controls="sidebar-collapse-12">
                    <a href="12">1. Linear Recursion and Iteration</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-13">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-13" aria-expanded="false" aria-controls="sidebar-collapse-13">
                    <a href="13">2. Tree Recursion</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-14">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-14" aria-expanded="false" aria-controls="sidebar-collapse-14">
                    <a href="14">3. Orders of Growth</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-15">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-15" aria-expanded="false" aria-controls="sidebar-collapse-15">
                    <a href="15">4. Exponentiation</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-16">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-16" aria-expanded="false" aria-controls="sidebar-collapse-16">
                    <a href="16">5. Greatest Common Divisors</a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-17">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-11" href="#sidebar-collapse-17" aria-expanded="false" aria-controls="sidebar-collapse-17">
                    <a href="17">6. Example: Testing for Primality</a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-18">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-18" aria-expanded="true" aria-controls="sidebar-collapse-18">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-1" href="#sidebar-collapse-18" aria-expanded="true" aria-controls="sidebar-collapse-18">
                    -
                  </a>
                    <a href="18">3.         Formulating Abstractions with Higher-Order         Functions      </a>
                </h5>
              </div>
              <div id="sidebar-collapse-18" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-19">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-18" href="#sidebar-collapse-19" aria-expanded="false" aria-controls="sidebar-collapse-19">
                    <a href="19">1.           Functions          as Arguments        </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-20">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-18" href="#sidebar-collapse-20" aria-expanded="false" aria-controls="sidebar-collapse-20">
                    <a href="20">2.           Function Definition Expressions          </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-21">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-18" href="#sidebar-collapse-21" aria-expanded="false" aria-controls="sidebar-collapse-21">
                    <a href="21">3.             Functions            as General Methods          </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-22">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-18" href="#sidebar-collapse-22" aria-expanded="false" aria-controls="sidebar-collapse-22">
                    <a href="22">4.               Functions              as Returned Values            </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-23">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-23" aria-expanded="true" aria-controls="sidebar-collapse-23">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-23" aria-expanded="true" aria-controls="sidebar-collapse-23">
                    -
                  </a>
                    <a href="23">2. Building Abstractions with Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-23" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-24">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-24" aria-expanded="true" aria-controls="sidebar-collapse-24">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-24" aria-expanded="true" aria-controls="sidebar-collapse-24">
                    -
                  </a>
                    <a href="24">1. Introduction to Data Abstraction</a>
                </h5>
              </div>
              <div id="sidebar-collapse-24" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-25">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-24" href="#sidebar-collapse-25" aria-expanded="false" aria-controls="sidebar-collapse-25">
                    <a href="25">1.         Example: Arithmetic Operations for Rational Numbers      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-26">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-24" href="#sidebar-collapse-26" aria-expanded="false" aria-controls="sidebar-collapse-26">
                    <a href="26">2.         Abstraction Barriers      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-27">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-24" href="#sidebar-collapse-27" aria-expanded="false" aria-controls="sidebar-collapse-27">
                    <a href="27">3.         What Is Meant by Data?      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-28">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-24" href="#sidebar-collapse-28" aria-expanded="false" aria-controls="sidebar-collapse-28">
                    <a href="28">4.         Extended Exercise: Interval Arithmetic      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-29">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-29" aria-expanded="true" aria-controls="sidebar-collapse-29">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-29" aria-expanded="true" aria-controls="sidebar-collapse-29">
                    -
                  </a>
                    <a href="29">2. Hierarchical Data and the Closure Property</a>
                </h5>
              </div>
              <div id="sidebar-collapse-29" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-30">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-29" href="#sidebar-collapse-30" aria-expanded="false" aria-controls="sidebar-collapse-30">
                    <a href="30">1.         Representing Sequences      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-31">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-29" href="#sidebar-collapse-31" aria-expanded="false" aria-controls="sidebar-collapse-31">
                    <a href="31">2.         Hierarchical Structures      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-32">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-29" href="#sidebar-collapse-32" aria-expanded="false" aria-controls="sidebar-collapse-32">
                    <a href="32">3.         Sequences as Conventional Interfaces      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-33">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-29" href="#sidebar-collapse-33" aria-expanded="false" aria-controls="sidebar-collapse-33">
                    <a href="33">4.         Example: A Picture Language      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-34">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-34" aria-expanded="true" aria-controls="sidebar-collapse-34">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-34" aria-expanded="true" aria-controls="sidebar-collapse-34">
                    -
                  </a>
                    <a href="34">3. Symbolic Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-34" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-35">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-34" href="#sidebar-collapse-35" aria-expanded="false" aria-controls="sidebar-collapse-35">
                    <a href="35">1.         Strings      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-36">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-34" href="#sidebar-collapse-36" aria-expanded="false" aria-controls="sidebar-collapse-36">
                    <a href="36">2.         Example: Symbolic Differentiation      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-37">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-34" href="#sidebar-collapse-37" aria-expanded="false" aria-controls="sidebar-collapse-37">
                    <a href="37">3.         Example: Representing Sets      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-38">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-34" href="#sidebar-collapse-38" aria-expanded="false" aria-controls="sidebar-collapse-38">
                    <a href="38">4.         Example: Huffman Encoding Trees      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-39">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-39" aria-expanded="true" aria-controls="sidebar-collapse-39">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-39" aria-expanded="true" aria-controls="sidebar-collapse-39">
                    -
                  </a>
                    <a href="39">4. Multiple Representations for Abstract Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-39" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-40">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-39" href="#sidebar-collapse-40" aria-expanded="false" aria-controls="sidebar-collapse-40">
                    <a href="40">1.         Representations for Complex Numbers      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-41">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-39" href="#sidebar-collapse-41" aria-expanded="false" aria-controls="sidebar-collapse-41">
                    <a href="41">2.         Tagged data      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-42">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-39" href="#sidebar-collapse-42" aria-expanded="false" aria-controls="sidebar-collapse-42">
                    <a href="42">3.         Data-Directed Programming and Additivity      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-43">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-43" aria-expanded="true" aria-controls="sidebar-collapse-43">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-23" href="#sidebar-collapse-43" aria-expanded="true" aria-controls="sidebar-collapse-43">
                    -
                  </a>
                    <a href="43">5. Systems with Generic Operations</a>
                </h5>
              </div>
              <div id="sidebar-collapse-43" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-44">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-43" href="#sidebar-collapse-44" aria-expanded="false" aria-controls="sidebar-collapse-44">
                    <a href="44">1.         Generic Arithmetic Operations      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-45">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-43" href="#sidebar-collapse-45" aria-expanded="false" aria-controls="sidebar-collapse-45">
                    <a href="45">2.         Combining Data of Different Types      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-46">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-43" href="#sidebar-collapse-46" aria-expanded="false" aria-controls="sidebar-collapse-46">
                    <a href="46">3.         Example: Symbolic Algebra      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-47">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-47" aria-expanded="true" aria-controls="sidebar-collapse-47">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-47" aria-expanded="true" aria-controls="sidebar-collapse-47">
                    -
                  </a>
                    <a href="47">3. Modularity, Objects, and State</a>
                </h5>
              </div>
              <div id="sidebar-collapse-47" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-48">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-48" aria-expanded="true" aria-controls="sidebar-collapse-48">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-48" aria-expanded="true" aria-controls="sidebar-collapse-48">
                    -
                  </a>
                    <a href="48">1. Assignment and Local State</a>
                </h5>
              </div>
              <div id="sidebar-collapse-48" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-49">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-48" href="#sidebar-collapse-49" aria-expanded="false" aria-controls="sidebar-collapse-49">
                    <a href="49">1.         Local State Variables      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-50">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-48" href="#sidebar-collapse-50" aria-expanded="false" aria-controls="sidebar-collapse-50">
                    <a href="50">2.         The Benefits of Introducing Assignment      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-51">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-48" href="#sidebar-collapse-51" aria-expanded="false" aria-controls="sidebar-collapse-51">
                    <a href="51">3.         The Costs of Introducing Assignment      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-52">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-52" aria-expanded="true" aria-controls="sidebar-collapse-52">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-52" aria-expanded="true" aria-controls="sidebar-collapse-52">
                    -
                  </a>
                    <a href="52">2. The Environment Model of Evaluation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-52" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-53">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-52" href="#sidebar-collapse-53" aria-expanded="false" aria-controls="sidebar-collapse-53">
                    <a href="53">1.         The Rules for Evaluation      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-54">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-52" href="#sidebar-collapse-54" aria-expanded="false" aria-controls="sidebar-collapse-54">
                    <a href="54">2.         Applying Simple        Functions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-55">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-52" href="#sidebar-collapse-55" aria-expanded="false" aria-controls="sidebar-collapse-55">
                    <a href="55">3.         Frames as the Repository of Local State      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-56">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-52" href="#sidebar-collapse-56" aria-expanded="false" aria-controls="sidebar-collapse-56">
                    <a href="56">4.         Internal Definitions      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-57">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-57" aria-expanded="true" aria-controls="sidebar-collapse-57">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-57" aria-expanded="true" aria-controls="sidebar-collapse-57">
                    -
                  </a>
                    <a href="57">3. Modeling with Mutable Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-57" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-58">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-57" href="#sidebar-collapse-58" aria-expanded="false" aria-controls="sidebar-collapse-58">
                    <a href="58">1.         Mutable List Structure      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-59">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-57" href="#sidebar-collapse-59" aria-expanded="false" aria-controls="sidebar-collapse-59">
                    <a href="59">2.         Representing Queues      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-60">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-57" href="#sidebar-collapse-60" aria-expanded="false" aria-controls="sidebar-collapse-60">
                    <a href="60">3.         Representing Tables      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-61">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-57" href="#sidebar-collapse-61" aria-expanded="false" aria-controls="sidebar-collapse-61">
                    <a href="61">4.         A Simulator for Digital Circuits      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-62">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-57" href="#sidebar-collapse-62" aria-expanded="false" aria-controls="sidebar-collapse-62">
                    <a href="62">5.         Propagation of Constraints      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-63">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-63" aria-expanded="true" aria-controls="sidebar-collapse-63">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-63" aria-expanded="true" aria-controls="sidebar-collapse-63">
                    -
                  </a>
                    <a href="63">4. Concurrency: Time Is of the Essence</a>
                </h5>
              </div>
              <div id="sidebar-collapse-63" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-64">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-63" href="#sidebar-collapse-64" aria-expanded="false" aria-controls="sidebar-collapse-64">
                    <a href="64">1.         The Nature of Time in Concurrent Systems      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-65">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-63" href="#sidebar-collapse-65" aria-expanded="false" aria-controls="sidebar-collapse-65">
                    <a href="65">2.         Mechanisms for Controlling Concurrency      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-66">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-66" aria-expanded="true" aria-controls="sidebar-collapse-66">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-47" href="#sidebar-collapse-66" aria-expanded="true" aria-controls="sidebar-collapse-66">
                    -
                  </a>
                    <a href="66">5. Streams</a>
                </h5>
              </div>
              <div id="sidebar-collapse-66" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-67">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-66" href="#sidebar-collapse-67" aria-expanded="false" aria-controls="sidebar-collapse-67">
                    <a href="67">1.         Streams Are Delayed Lists      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-68">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-66" href="#sidebar-collapse-68" aria-expanded="false" aria-controls="sidebar-collapse-68">
                    <a href="68">2.         Infinite Streams      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-69">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-66" href="#sidebar-collapse-69" aria-expanded="false" aria-controls="sidebar-collapse-69">
                    <a href="69">3.   Exploiting the Stream Paradigm      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-70">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-66" href="#sidebar-collapse-70" aria-expanded="false" aria-controls="sidebar-collapse-70">
                    <a href="70">4.   Streams and Delayed Evaluation      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-71">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-66" href="#sidebar-collapse-71" aria-expanded="false" aria-controls="sidebar-collapse-71">
                    <a href="71">5.   Modularity of Functional Programs and Modularity of Objects      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-72">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-72" aria-expanded="true" aria-controls="sidebar-collapse-72">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-72" aria-expanded="true" aria-controls="sidebar-collapse-72">
                    -
                  </a>
                    <a href="72">4. Metalinguistic Abstraction</a>
                </h5>
              </div>
              <div id="sidebar-collapse-72" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-73">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-73" aria-expanded="true" aria-controls="sidebar-collapse-73">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-73" aria-expanded="true" aria-controls="sidebar-collapse-73">
                    -
                  </a>
                    <a href="73">1. The Metacircular Evaluator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-73" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-74">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-74" aria-expanded="false" aria-controls="sidebar-collapse-74">
                    <a href="74">1.   The Core of the Evaluator      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-75">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-75" aria-expanded="false" aria-controls="sidebar-collapse-75">
                    <a href="75">2.   Representing Statements and Expressions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-76">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-76" aria-expanded="false" aria-controls="sidebar-collapse-76">
                    <a href="76">3.   Evaluator Data Structures      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-77">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-77" aria-expanded="false" aria-controls="sidebar-collapse-77">
                    <a href="77">4.   Running the Evaluator as a Program      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-78">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-78" aria-expanded="false" aria-controls="sidebar-collapse-78">
                    <a href="78">5.   Data as Programs      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-79">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-79" aria-expanded="false" aria-controls="sidebar-collapse-79">
                    <a href="79">6.   Internal Definitions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-80">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-73" href="#sidebar-collapse-80" aria-expanded="false" aria-controls="sidebar-collapse-80">
                    <a href="80">7.   Separating Syntactic Analysis from Execution      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-81">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-81" aria-expanded="true" aria-controls="sidebar-collapse-81">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-81" aria-expanded="true" aria-controls="sidebar-collapse-81">
                    -
                  </a>
                    <a href="81">2. Variations on a SchemeLazy Evaluation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-81" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-82">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-81" href="#sidebar-collapse-82" aria-expanded="false" aria-controls="sidebar-collapse-82">
                    <a href="82">1.   Normal Order and Applicative Order      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-83">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-81" href="#sidebar-collapse-83" aria-expanded="false" aria-controls="sidebar-collapse-83">
                    <a href="83">2.   An Interpreter with Lazy Evaluation      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-84">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-81" href="#sidebar-collapse-84" aria-expanded="false" aria-controls="sidebar-collapse-84">
                    <a href="84">3.   Streams as Lazy Lists      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-85">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-85" aria-expanded="true" aria-controls="sidebar-collapse-85">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-85" aria-expanded="true" aria-controls="sidebar-collapse-85">
                    -
                  </a>
                    <a href="85">3. Variations on a SchemeNondeterministic Computing</a>
                </h5>
              </div>
              <div id="sidebar-collapse-85" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-86">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-85" href="#sidebar-collapse-86" aria-expanded="false" aria-controls="sidebar-collapse-86">
                    <a href="86">1.   Amb and Search      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-87">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-85" href="#sidebar-collapse-87" aria-expanded="false" aria-controls="sidebar-collapse-87">
                    <a href="87">2.   Examples of Nondeterministic Programs      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-88">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-85" href="#sidebar-collapse-88" aria-expanded="false" aria-controls="sidebar-collapse-88">
                    <a href="88">3.   Implementing the Amb Evaluator      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-89">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-89" aria-expanded="true" aria-controls="sidebar-collapse-89">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-72" href="#sidebar-collapse-89" aria-expanded="true" aria-controls="sidebar-collapse-89">
                    -
                  </a>
                    <a href="89">4. Logic Programming</a>
                </h5>
              </div>
              <div id="sidebar-collapse-89" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-90">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-89" href="#sidebar-collapse-90" aria-expanded="false" aria-controls="sidebar-collapse-90">
                    <a href="90">1.   Deductive Information Retrieval      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-91">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-89" href="#sidebar-collapse-91" aria-expanded="false" aria-controls="sidebar-collapse-91">
                    <a href="91">2.   How the Query System Works      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-92">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-89" href="#sidebar-collapse-92" aria-expanded="false" aria-controls="sidebar-collapse-92">
                    <a href="92">3.   Is Logic Programming Mathematical Logic?      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-93">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-89" href="#sidebar-collapse-93" aria-expanded="false" aria-controls="sidebar-collapse-93">
                    <a href="93">4.   Implementing the Query System      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                             <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-94">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-94" aria-expanded="true" aria-controls="sidebar-collapse-94">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#nav-sidebar" href="#sidebar-collapse-94" aria-expanded="true" aria-controls="sidebar-collapse-94">
                    -
                  </a>
                    <a href="94">5. Computing with Register Machines</a>
                </h5>
              </div>
              <div id="sidebar-collapse-94" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-95">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-95" aria-expanded="true" aria-controls="sidebar-collapse-95">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-95" aria-expanded="true" aria-controls="sidebar-collapse-95">
                    -
                  </a>
                    <a href="95">1. Designing Register Machines</a>
                </h5>
              </div>
              <div id="sidebar-collapse-95" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-96">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-95" href="#sidebar-collapse-96" aria-expanded="false" aria-controls="sidebar-collapse-96">
                    <a href="96">1.   A Language for Describing Register Machines      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-97">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-95" href="#sidebar-collapse-97" aria-expanded="false" aria-controls="sidebar-collapse-97">
                    <a href="97">2.   Abstraction in Machine Design      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-98">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-95" href="#sidebar-collapse-98" aria-expanded="false" aria-controls="sidebar-collapse-98">
                    <a href="98">3.   Subroutines      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-99">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-95" href="#sidebar-collapse-99" aria-expanded="false" aria-controls="sidebar-collapse-99">
                    <a href="99">4.   Using a Stack to Implement Recursion      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-100">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-95" href="#sidebar-collapse-100" aria-expanded="false" aria-controls="sidebar-collapse-100">
                    <a href="100">5.   Instruction Summary      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-101">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-101" aria-expanded="true" aria-controls="sidebar-collapse-101">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-101" aria-expanded="true" aria-controls="sidebar-collapse-101">
                    -
                  </a>
                    <a href="101">2. A Register-Machine Simulator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-101" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-102">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-101" href="#sidebar-collapse-102" aria-expanded="false" aria-controls="sidebar-collapse-102">
                    <a href="102">1.   The Machine Model      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-103">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-101" href="#sidebar-collapse-103" aria-expanded="false" aria-controls="sidebar-collapse-103">
                    <a href="103">2.   The Assembler      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-104">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-101" href="#sidebar-collapse-104" aria-expanded="false" aria-controls="sidebar-collapse-104">
                    <a href="104">3.   Generating Execution  Functions  for Instructions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-105">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-101" href="#sidebar-collapse-105" aria-expanded="false" aria-controls="sidebar-collapse-105">
                    <a href="105">4.   Monitoring Machine Performance      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-106">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-106" aria-expanded="true" aria-controls="sidebar-collapse-106">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-106" aria-expanded="true" aria-controls="sidebar-collapse-106">
                    -
                  </a>
                    <a href="106">3. Storage Allocation and Garbage Collection</a>
                </h5>
              </div>
              <div id="sidebar-collapse-106" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-107">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-106" href="#sidebar-collapse-107" aria-expanded="false" aria-controls="sidebar-collapse-107">
                    <a href="107">1.   Memory as Vectors      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-108">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-106" href="#sidebar-collapse-108" aria-expanded="false" aria-controls="sidebar-collapse-108">
                    <a href="108">2.   Maintaining the Illusion of Infinite Memory      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-109">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-109" aria-expanded="true" aria-controls="sidebar-collapse-109">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-109" aria-expanded="true" aria-controls="sidebar-collapse-109">
                    -
                  </a>
                    <a href="109">4. The Explicit-Control Evaluator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-109" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-110">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-109" href="#sidebar-collapse-110" aria-expanded="false" aria-controls="sidebar-collapse-110">
                    <a href="110">1.   The Core of the Explicit-Control Evaluator      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-111">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-109" href="#sidebar-collapse-111" aria-expanded="false" aria-controls="sidebar-collapse-111">
                    <a href="111">2.   Sequence Evaluation and Tail Recursion      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-112">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-109" href="#sidebar-collapse-112" aria-expanded="false" aria-controls="sidebar-collapse-112">
                    <a href="112">3.   Conditionals, Assignments, and Definitions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-113">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-109" href="#sidebar-collapse-113" aria-expanded="false" aria-controls="sidebar-collapse-113">
                    <a href="113">4.   Running the Evaluator      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-114">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-114" aria-expanded="true" aria-controls="sidebar-collapse-114">
                    +
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" data-parent="#sidebar-94" href="#sidebar-collapse-114" aria-expanded="true" aria-controls="sidebar-collapse-114">
                    -
                  </a>
                    <a href="114">5. Compilation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-114" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-115">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-115" aria-expanded="false" aria-controls="sidebar-collapse-115">
                    <a href="115">1.   Structure of the Compiler      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-116">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-116" aria-expanded="false" aria-controls="sidebar-collapse-116">
                    <a href="116">2.   Compiling Expressions      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-117">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-117" aria-expanded="false" aria-controls="sidebar-collapse-117">
                    <a href="117">3.   Compiling Combinations      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-118">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-118" aria-expanded="false" aria-controls="sidebar-collapse-118">
                    <a href="118">4.   Combining Instruction Sequences      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-119">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-119" aria-expanded="false" aria-controls="sidebar-collapse-119">
                    <a href="119">5.   An Example of Compiled Code      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-120">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-120" aria-expanded="false" aria-controls="sidebar-collapse-120">
                    <a href="120">6.   Lexical Addressing      </a>
                  </a>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-121">
                <h5 class="mb-0">
                  <a class="collapsed" data-toggle="collapse" data-parent="#sidebar-114" href="#sidebar-collapse-121" aria-expanded="false" aria-controls="sidebar-collapse-121">
                    <a href="121">7.   Interfacing Compiled Code to the Evaluator      </a>
                  </a>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

          </div>

           <div class="chapter-content">
    <div class="chapter-title">
        1.2.6.Example: Testing for Primality
    </div>
    <div class="chapter-text" >
        <div class="SUBSECTION"><SUBSECTION>

        

        
        
        

        <p>
          This section describes two methods for checking the primality of an
          integer $n$, one with order of growth $\Theta(\sqrt{n})$, and a
          <QUOTE>probabilistic</QUOTE> algorithm with order of growth $\Theta(\log n)$.  The
          exercises at the end of this section suggest programming
          projects based on these algorithms.
        </p>

        <h2>
          Searching for divisors
        </h2>

        <p>
          Since ancient times, mathematicians have been fascinated by problems
          concerning prime numbers, and many people have worked on the problem
          of determining ways to test if numbers are prime.  One way
          to test if a number is prime is to find the number's divisors.  The
          following program finds the smallest integral divisor (greater than 1)
          of a given number $n$.  It does this in a straightforward way, by
          testing $n$ for divisibility by successive integers starting with 2.

        <div class="snippet" id="javascript_17_0_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function smallest_divisor(n) {\n   return find_divisor(n,2);\n}\nfunction find_divisor(n,test_divisor) {\n   if (square(test_divisor) &gt; n) \n        return n;\n   else if (divides(test_divisor,n))\n        return test_divisor;\n   else return find_divisor(n, test_divisor + 1);\n}\nfunction divides(a,b) {\n   return b % a === 0;\n}','javascript_17_0','', event,1.0);window.eval('function square(x){return x*x};');">function smallest_divisor(n) {
   return find_divisor(n,2);
}
function find_divisor(n,test_divisor) {
   if (square(test_divisor) &gt; n) 
        return n;
   else if (divides(test_divisor,n))
        return test_divisor;
   else return find_divisor(n, test_divisor + 1);
}
function divides(a,b) {
   return b % a === 0;
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20smallest_divisor(n)%20%7B%0A%20%20%20return%20find_divisor(n,2);%0A%7D%0Afunction%20find_divisor(n,test_divisor)%20%7B%0A%20%20%20if%20(square(test_divisor)%20&amp;gt;%20n)%20%0A%20%20%20%20%20%20%20%20return%20n;%0A%20%20%20else%20if%20(divides(test_divisor,n))%0A%20%20%20%20%20%20%20%20return%20test_divisor;%0A%20%20%20else%20return%20find_divisor(n,%20test_divisor%20+%201);%0A%7D%0Afunction%20divides(a,b)%20%7B%0A%20%20%20return%20b%20%%20a%20===%200;%0A%7D&amp;hidden=function%20square(x)%7Breturn%20x*x%7D;" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        
              
              
              
        </p>

        <p>
          We can test whether a number is prime as follows: $n$ is prime if
          and only if $n$ is its own smallest divisor.

              
        <div class="snippet" id="javascript_17_1_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function is_prime(n) {\n   return n === smallest_divisor(n);\n}','javascript_17_1','', event,1.0);window.eval('function square(x){return x*x};function smallest_divisor(n){return find_divisor(n,2)}function find_divisor(n,test_divisor){if(square(test_divisor)&gt;n){return n}else{if(divides(test_divisor,n)){return test_divisor}else{return find_divisor(n,test_divisor+1)}}}function divides(a,b){return b%a===0};');">function is_prime(n) {
   return n === smallest_divisor(n);
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20is_prime(n)%20%7B%0A%20%20%20return%20n%20===%20smallest_divisor(n);%0A%7D&amp;hidden=function%20square(x)%7Breturn%20x*x%7D;function%20smallest_divisor(n)%7Breturn%20find_divisor(n,2)%7Dfunction%20find_divisor(n,test_divisor)%7Bif(square(test_divisor)&amp;gt;n)%7Breturn%20n%7Delse%7Bif(divides(test_divisor,n))%7Breturn%20test_divisor%7Delse%7Breturn%20find_divisor(n,test_divisor+1)%7D%7D%7Dfunction%20divides(a,b)%7Breturn%20b%a===0%7D;" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        

        </p>

        <p>
          The end test for 
          <kbd>find_divisor</kbd>
          is based on the fact that if $n$
          is not prime it must have a divisor less than or equal to
          $\sqrt{n}$.<a class="superscript" id="footnote-link-1" href="17#footnote-1">[1]</a> 
          This means that the algorithm need only test divisors between 1 and
          $\sqrt{n}$.  Consequently, the number of steps required to identify
          $n$ as prime will have order of growth $\Theta(\sqrt{n})$.
        </p>

        <h2>
          The Fermat test
        </h2>

        <p>
          
          
          The $\Theta(\log n)$ primality test is based on a result from number
          theory known as Fermat's Little 
          Theorem.<a class="superscript" id="footnote-link-2" href="17#footnote-2">[2]</a>

          
          <P>
            <B>Fermat's Little Theorem:</B> 
            If $n$ is a prime number and 
            $a$ is any positive integer less than 
            $n$, then $a$ raised to the
            $n$th power is congruent to $a$ 
            modulo $n$.
          </P>
          
          (Two numbers are said to be <EM>congruent modulo</EM> $n$ if
          they both have the same remainder when divided by $n$.  The
          remainder of a number $a$ when divided by 
          $n$ is also referred to as
          the 
          
          <EM>remainder of</EM> $a$ <EM>modulo</EM> $n$, or simply as $a$ 
          <EM>modulo</EM> $n$.)
        </p>

        <p>
          If $n$ is not prime, then, in general, most of the numbers $a&lt; n$ will not
          satisfy the above relation.  This leads to the following algorithm for
          testing primality: Given a number $n$, pick a 
          
          random number $a &lt; n$ and
          compute the remainder of $a^n$ modulo $n$.  If the result is not equal to
          $a$, then $n$ is certainly not prime.  If it is $a$, then chances are good
          that $n$ is prime.  Now pick another random number $a$ and test it with the
          same method.  If it also satisfies the equation, then we can be even more
          confident that $n$ is prime.  By trying more and more values of $a$, we can
          increase our confidence in the result.  This algorithm is known as the
          Fermat test.
        </p>

        <p>
              
              To implement the Fermat test, we need a function that computes the
              exponential of a number modulo another number:

        <div class="snippet" id="javascript_17_2_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function expmod(base,exp,m) {\n   if (exp === 0) \n        return 1;\n   else if (is_even(exp))\n        return square(expmod(base,exp/2,m)) % m;\n   else return (base * expmod(base,exp - 1,m)) % m;\n}','javascript_17_2','', event,1.0);window.eval('function is_even(n){return n%2===0};function square(x){return x*x};');">function expmod(base,exp,m) {
   if (exp === 0) 
        return 1;
   else if (is_even(exp))
        return square(expmod(base,exp/2,m)) % m;
   else return (base * expmod(base,exp - 1,m)) % m;
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20expmod(base,exp,m)%20%7B%0A%20%20%20if%20(exp%20===%200)%20%0A%20%20%20%20%20%20%20%20return%201;%0A%20%20%20else%20if%20(is_even(exp))%0A%20%20%20%20%20%20%20%20return%20square(expmod(base,exp/2,m))%20%%20m;%0A%20%20%20else%20return%20(base%20*%20expmod(base,exp%20-%201,m))%20%%20m;%0A%7D&amp;hidden=function%20is_even(n)%7Breturn%20n%2===0%7D;function%20square(x)%7Breturn%20x*x%7D;" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        
        </p>

        <p>
              This is very similar to the 
              <kbd>fast_expt</kbd>
              function of
              Section <REF NAME="sec:exponentiation"></REF>.  It uses successive squaring, so
              that the number of steps grows logarithmically with the
              exponent.<a class="superscript" id="footnote-link-3" href="17#footnote-3">[3]</a>
        </p>

        <p>
              The Fermat test is performed by choosing at random a number $a$
              between 1 and $n-1$ inclusive and checking whether the remainder
              modulo $n$ of the $n$th power of $a$ is equal to $a$.  The random
              number $a$ is chosen using the function
              
              <kbd>random</kbd>, which we assume is
              included as a primitive in Scheme. 
              
                
                
                  The function                   <kbd>random</kbd>
                
              
              returns a
              nonnegative integer less than its integer input.  Hence, to obtain a random
              number between 1 and $n-1$, 
              we call <kbd>random</kbd> with an input of
              $n-1$ and add 1 to the result:

              

        
     
        <div class="snippet" id="javascript_17_3_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function fermat_test(n) {\n   function try_it(a) {\n      return expmod(a,n,n) === a;\n   }\n   return try_it(1 + random(n - 1));\n}','javascript_17_3','', event,1.0);window.eval('function square(x){return x*x};function is_even(n){return n%2===0};function square(x){return x*x};function expmod(base,exp,m){if(exp===0){return 1}else{if(is_even(exp)){return square(expmod(base,exp/2,m))%m}else{return(base*expmod(base,exp-1,m))%m}}};function random(n){return Math.floor(Math.random()*n)};');">function fermat_test(n) {
   function try_it(a) {
      return expmod(a,n,n) === a;
   }
   return try_it(1 + random(n - 1));
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20fermat_test(n)%20%7B%0A%20%20%20function%20try_it(a)%20%7B%0A%20%20%20%20%20%20return%20expmod(a,n,n)%20===%20a;%0A%20%20%20%7D%0A%20%20%20return%20try_it(1%20+%20random(n%20-%201));%0A%7D&amp;hidden=function%20square(x)%7Breturn%20x*x%7D;function%20is_even(n)%7Breturn%20n%2===0%7D;function%20square(x)%7Breturn%20x*x%7D;function%20expmod(base,exp,m)%7Bif(exp===0)%7Breturn%201%7Delse%7Bif(is_even(exp))%7Breturn%20square(expmod(base,exp/2,m))%m%7Delse%7Breturn(base*expmod(base,exp-1,m))%m%7D%7D%7D;function%20random(n)%7Breturn%20Math.floor(Math.random()*n)%7D;" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        
        </p>

        <p>
          The following 
          function 
          runs the test a given number of times, as
          specified by a parameter.  Its value is true if the test succeeds
          every time, and false otherwise.
        <div class="snippet" id="javascript_17_4_div"></div><div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function fermat_test(n) {\n   function try_it(a) {\n      return expmod(a,n,n) === a;\n   }\n   return try_it(1 + random(n - 1));\n}\nfunction fast_is_prime(n,times) {\n   if (times === 0)\n        return true;\n   else if (fermat_test(n))\n        return fast_is_prime(n, times - 1);\n   else return false;\n}','javascript_17_4','', event,1.0);window.eval('function square(x){return x*x};function is_even(n){return n%2===0};function square(x){return x*x};function expmod(base,exp,m){if(exp===0){return 1}else{if(is_even(exp)){return square(expmod(base,exp/2,m))%m}else{return(base*expmod(base,exp-1,m))%m}}};function random(n){return Math.floor(Math.random()*n)};function fermat_test(n){function try_it(a){return expmod(a,n,n)===a}return try_it(1+random(n-1))};');">function fermat_test(n) {
   function try_it(a) {
      return expmod(a,n,n) === a;
   }
   return try_it(1 + random(n - 1));
}
function fast_is_prime(n,times) {
   if (times === 0)
        return true;
   else if (fermat_test(n))
        return fast_is_prime(n, times - 1);
   else return false;
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20fermat_test(n)%20%7B%0A%20%20%20function%20try_it(a)%20%7B%0A%20%20%20%20%20%20return%20expmod(a,n,n)%20===%20a;%0A%20%20%20%7D%0A%20%20%20return%20try_it(1%20+%20random(n%20-%201));%0A%7D%0Afunction%20fast_is_prime(n,times)%20%7B%0A%20%20%20if%20(times%20===%200)%0A%20%20%20%20%20%20%20%20return%20true;%0A%20%20%20else%20if%20(fermat_test(n))%0A%20%20%20%20%20%20%20%20return%20fast_is_prime(n,%20times%20-%201);%0A%20%20%20else%20return%20false;%0A%7D&amp;hidden=function%20square(x)%7Breturn%20x*x%7D;function%20is_even(n)%7Breturn%20n%2===0%7D;function%20square(x)%7Breturn%20x*x%7D;function%20expmod(base,exp,m)%7Bif(exp===0)%7Breturn%201%7Delse%7Bif(is_even(exp))%7Breturn%20square(expmod(base,exp/2,m))%m%7Delse%7Breturn(base*expmod(base,exp-1,m))%m%7D%7D%7D;function%20random(n)%7Breturn%20Math.floor(Math.random()*n)%7D;function%20fermat_test(n)%7Bfunction%20try_it(a)%7Breturn%20expmod(a,n,n)===a%7Dreturn%20try_it(1+random(n-1))%7D;" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>

        
        
        </p>

        <h2>
          Probabilistic methods
        </h2>

        
        

        <p>
          The Fermat test differs in character from most familiar algorithms, in
          which one computes an answer that is guaranteed to be correct.  Here,
          the answer obtained is only probably correct.  More precisely, if $n$
          ever fails the Fermat test, we can be certain that $n$ is not prime.
          But the fact that $n$ passes the test, while an extremely strong
          indication, is still not a guarantee that $n$ is prime.  What we would
          like to say is that for any number $n$, if we perform the test enough
          times and find that $n$ always passes the test, then the probability
          of error in our primality test can be made as small as we like.
        </p>

        <p>
          Unfortunately, this assertion is not quite correct.  There do exist
          numbers that fool the Fermat test: numbers $n$ that are not prime and
          yet have the property that $a^n$ is congruent to $a$ modulo $n$ for
          all integers $a &lt; n$.  Such numbers are extremely rare, so the Fermat
          test is quite reliable in practice.<a class="superscript" id="footnote-link-4" href="17#footnote-4">[4]</a>
        </p>

        <p>
          There are variations of the Fermat test that cannot be fooled.  In
          these tests, as with the Fermat method, one tests the primality of an
          integer $n$ by choosing a random integer $a&lt;n$ and checking some
          condition that depends upon $n$ and $a$.  (See
          Exercise <REF NAME="ex:miller-rabin"></REF> for an example of such a test.)  On the
          other hand, in contrast to the Fermat test, one can prove that, for
          any $n$, the condition does not hold for most of the integers $a&lt;n$
          unless $n$ is prime.  Thus, if $n$ passes the test for some random
          choice of $a$, the chances are better than even that $n$ is prime.  If
          $n$ passes the test for two random choices of $a$, the chances are better
          than 3 out of 4 that $n$ is prime. By running the test with more and
          more randomly chosen values of $a$ we can make the probability of
          error as small as we like.
          
          
        </p>

        <p>
          The existence of tests for which one can prove that the chance of
          error becomes arbitrarily small has sparked interest in algorithms of
          this type, which have come to be known as <EM>probabilistic
            algorithms</EM>.  There is a great deal of research activity in this area,
          and probabilistic algorithms have been fruitfully applied to many
          fields.<a class="superscript" id="footnote-link-5" href="17#footnote-5">[5]</a>
          
          
          
        </p>

        <EXERCISE> 
            Use the 
<kbd>smallest_divisor</kbd> 
            function 
            to find the smallest divisor
            of each of the following numbers: 199, 1999, 19999.
        
        
        </EXERCISE>

        <EXERCISE> 
            
            
              
              
                Assume that our JavaScript interpreter defines a primitive called 
              
            
            <kbd>runtime</kbd>
            that returns an integer that specifies the amount of time the system
            has been running (measured, for example, in microseconds).  The
            following 
            
              
              
                <kbd>timed_prime_test</kbd>
              
            
            function,
            when called with an
            integer $n$, prints $n$ and 
            checks to see if $n$ is prime.  
            If $n$ is
            prime, the 
            function
            prints three asterisks followed by the amount of time
            used in performing the test.

            
            
        <div class="snippet" id="javascript_17_5_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function timed_prime_test(n) {\n   newline();\n   display(n);\n   start_prime_test(n,runtime());\n}\nfunction start_prime_test(n,start_time) {\n   if (is_prime(n))\n      return report_prime(runtime() - start_time);\n}\nfunction report_prime(elapsed_time) {\n   print(&quot; *** &quot;);\n   display(elapsed_time);\n}','javascript_17_5','', event,1.0);window.eval('function square(x){return x*x};function smallest_divisor(n){return find_divisor(n,2)}function find_divisor(n,test_divisor){if(square(test_divisor)&gt;n){return n}else{if(divides(test_divisor,n)){return test_divisor}else{return find_divisor(n,test_divisor+1)}}}function divides(a,b){return b%a===0};function is_prime(n){return n===smallest_divisor(n)};');">function timed_prime_test(n) {
   newline();
   display(n);
   start_prime_test(n,runtime());
}
function start_prime_test(n,start_time) {
   if (is_prime(n))
      return report_prime(runtime() - start_time);
}
function report_prime(elapsed_time) {
   print(" *** ");
   display(elapsed_time);
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20timed_prime_test(n)%20%7B%0A%20%20%20newline();%0A%20%20%20display(n);%0A%20%20%20start_prime_test(n,runtime());%0A%7D%0Afunction%20start_prime_test(n,start_time)%20%7B%0A%20%20%20if%20(is_prime(n))%0A%20%20%20%20%20%20return%20report_prime(runtime()%20-%20start_time);%0A%7D%0Afunction%20report_prime(elapsed_time)%20%7B%0A%20%20%20print(%22%20***%20%22);%0A%20%20%20display(elapsed_time);%0A%7D&amp;hidden=function%20square(x)%7Breturn%20x*x%7D;function%20smallest_divisor(n)%7Breturn%20find_divisor(n,2)%7Dfunction%20find_divisor(n,test_divisor)%7Bif(square(test_divisor)&amp;gt;n)%7Breturn%20n%7Delse%7Bif(divides(test_divisor,n))%7Breturn%20test_divisor%7Delse%7Breturn%20find_divisor(n,test_divisor+1)%7D%7D%7Dfunction%20divides(a,b)%7Breturn%20b%a===0%7D;function%20is_prime(n)%7Breturn%20n===smallest_divisor(n)%7D;" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
        
        Using this 
        function,
        write a 
        function
        
          
          
            <kbd>search_for_primes</kbd> 
          
        
        that checks the primality of consecutive odd integers in a specified range.
        Use your 
          
            
            
              function
            
          
        to find the three smallest primes larger than 1000;
        larger than 10,000; larger than 100,000; larger than 1,000,000.  Note
        the time needed to test each prime.  Since the testing algorithm has
        order of growth of $\Theta(\sqrt{n})$, 
        you should expect that testing
        for primes around 10,000 should take about $\sqrt{10}$ 
        times as long
        as testing for primes around 1000.  Do your timing data bear this out?
        How well do the data for 100,000 and 1,000,000 support the 
        $\sqrt{n}$
        prediction?  Is your result compatible with the notion that programs
        on your machine run in time proportional to the number of steps
        required for the computation?
        
        </EXERCISE>

        <EXERCISE> 
            
            The 
            
              
              
                <kbd>smallest_divisor</kbd> 
              
            
            function 
            shown at the start of this section
            does lots of needless testing: After it checks to see if the
            number is divisible by 2 there is no point in checking to see if
            it is divisible by any larger even numbers.  This suggests that the
            values used for 
            
              
              
                <kbd>test_divisor</kbd>
              
            
            should not be 2, 3, 4, 5, 6, <ELLIPSIS></ELLIPSIS>
            but rather 2, 3, 5, 7, 9, <ELLIPSIS></ELLIPSIS>.
            To implement this
            change, define a 
            function 
            <kbd>next</kbd> that returns 3 if its input is
            equal to 2 and otherwise returns its input plus 2.  
            Modify the 
            
              
              
                <kbd>smallest_divisor</kbd> 
              
            
            function 
            to use 
            
              
              
                <kbd>next(test_divisor)</kbd> 
              
            
            instead of 
            <kbd>test_divisor + 1</kbd>.
            With 
            
              
              
                <kbd>timed_prime_test</kbd>
              
            
            incorporating this modified version of 
            <kbd>smallest_divisor</kbd>,
            run the
            test for each of the 12 primes found in
            Exercise <REF NAME="ex:search-for-primes"></REF>.  
            Since this modification halves the
            number of test steps, you should expect it to run about twice as fast.
            Is this expectation confirmed?  If not, what is the observed ratio of
            the speeds of the two algorithms, and how do you explain the fact that
            it is different from 2?
        </EXERCISE>

        <EXERCISE> 
            Modify the 
            
              
              
                <kbd>timed_prime_test</kbd>
              
            
            function 
            of Exercise <REF NAME="ex:search-for-primes"></REF> to use 
            
              
              
                <kbd>fast_is_prime</kbd> 
              
            
            (the Fermat method), and test each of the 12 primes you found in that
            exercise.  Since the Fermat test has $\Theta(\log n)$ 
            growth, how        would you expect the time to test primes near 1,000,000 to compare
            with the time needed to test primes near 1000?  Do your data bear this
            out?  Can you explain any discrepancy you find?
            
        </EXERCISE>

        <EXERCISE> 
            Alyssa P. Hacker complains that we went to a lot of extra work in
            writing <kbd>expmod</kbd>.  
            After all, she says, since we already know how
            to compute exponentials, we could have simply written
            
            <div class="snippet" id="javascript_17_6_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function expmod(base,exp,m) {\n   return fast_expt(base,exp) % m;\n}','javascript_17_6','', event,1.0);window.eval('function square(x){return x*x};function is_even(n){return n%2===0};function fast_expt(b,n){if(n===0){return 1}else{if(is_even(n)){return square(fast_expt(b,n/2))}else{return b*fast_expt(b,n-1)}}}function is_even(n){return n%2===0};');">function expmod(base,exp,m) {
   return fast_expt(base,exp) % m;
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20expmod(base,exp,m)%20%7B%0A%20%20%20return%20fast_expt(base,exp)%20%%20m;%0A%7D&amp;hidden=function%20square(x)%7Breturn%20x*x%7D;function%20is_even(n)%7Breturn%20n%2===0%7D;function%20fast_expt(b,n)%7Bif(n===0)%7Breturn%201%7Delse%7Bif(is_even(n))%7Breturn%20square(fast_expt(b,n/2))%7Delse%7Breturn%20b*fast_expt(b,n-1)%7D%7D%7Dfunction%20is_even(n)%7Breturn%20n%2===0%7D;" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
            Is she correct?  
            Would this 
            function 
            serve as well for our fast prime tester?  Explain.
            
        
        </EXERCISE>

        <EXERCISE>
            Louis Reasoner is having great difficulty doing
            Exercise <REF NAME="ex:mod-timed-prime-test"></REF>.
            His 
            
              
              
                <kbd>fast_is_prime</kbd> 
              
            
            test seems to run more slowly than his 
            
              
              
                <kbd>is_prime</kbd> 
              
            
            test.
            Louis calls his friend Eva Lu Ator over to help.  When they examine Louis's code, they
            find that he has rewritten the 
            <kbd>expmod</kbd> 
            function
            to use an
            explicit multiplication, rather than calling <kbd>square</kbd>:

            <div class="snippet" id="javascript_17_7_div"></div>
<div class="pre-prettyprint">
<pre class="prettyprint" title="Evaluate Javascript expression" onclick="new window.JavascriptConsole('function expmod(base,exp,m) {\n   if (exp === 0)\n        return 1;\n   else if (is_even(exp))\n        return expmod(base,exp/2,m) \n               * expmod(base,exp/2,m)\n               % m;\n   else return base\n               * expmod(base,exp - 1,m) \n               % m;\n}','javascript_17_7','', event,1.0);window.eval('function is_even(n){return n%2===0};');">function expmod(base,exp,m) {
   if (exp === 0)
        return 1;
   else if (is_even(exp))
        return expmod(base,exp/2,m) 
               * expmod(base,exp/2,m)
               % m;
   else return base
               * expmod(base,exp - 1,m) 
               % m;
}</pre>
<a href="http://source-ide-new.surge.sh/?snippet=function%20expmod(base,exp,m)%20%7B%0A%20%20%20if%20(exp%20===%200)%0A%20%20%20%20%20%20%20%20return%201;%0A%20%20%20else%20if%20(is_even(exp))%0A%20%20%20%20%20%20%20%20return%20expmod(base,exp/2,m)%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20*%20expmod(base,exp/2,m)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%%20m;%0A%20%20%20else%20return%20base%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20*%20expmod(base,exp%20-%201,m)%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%%20m;%0A%7D&amp;hidden=function%20is_even(n)%7Breturn%20n%2===0%7D;" class="snippet-ide-link btn btn-primary">[Open in IDE]</a>
</div>
            

            <QUOTE>I don't see what difference that could make,</QUOTE> says Louis.  
            <QUOTE>I do.</QUOTE>  says Eva.  
            <QUOTE>By writing the 
             function 
              like that, you have
              transformed the $\Theta(\log n)$ 
              process into a $\Theta(n)$ process.</QUOTE>
            Explain.
        
        </EXERCISE>

        <EXERCISE>
            
            Demonstrate that the Carmichael numbers listed in
            footnote <REF NAME="foot:carmichaelfn"></REF> really do fool
            the Fermat test.  That is, write a 
            function 
            that takes an integer $n$
            and tests whether $a^n$ is congruent to 
            $a$ modulo $n$ for every
            $a&lt;n$, and try your 
            function 
            on the given Carmichael numbers.
        
        
        </EXERCISE>
        
        <EXERCISE>
            
            
            
            
            One variant of the Fermat test that cannot be fooled is called the
            <EM>Miller-Rabin test</EM> (<CITATION>Miller 1976</CITATION>; 
            <CITATION>Rabin 1980</CITATION>).  This starts from
            
            an alternate form of Fermat's Little Theorem, which states that if $n$
            is a prime number and $a$ is any positive integer less 
            than $n$, then
            $a$ raised to the $(n-1)$st 
            power is congruent to 1 modulo $n$.  To test
            the primality of a number $n$ by the Miller-Rabin test, 
            we pick a random number $a&lt;n$ and raise 
            $a$ to the $(n-1)$st power 
            modulo $n$
            using the <kbd>expmod</kbd> 
            function.
            However, whenever we perform the
            squaring step in <kbd>expmod</kbd>, we check to see if we have 
            discovered a
            <QUOTE>nontrivial square root of 1 
              modulo $n$,
            </QUOTE> 
            that is, a number not
            equal to 1 or $n-1$ whose square is equal to 1 
            modulo $n$.  It is
            possible to prove that if such a nontrivial square root of 1 exists,
            then $n$ is not prime.  
            It is also possible to prove that if $n$ is an
            odd number that is not prime, then, for at least half the numbers
            $a&lt;n$, computing $a^{n-1}$ 
            in this way will reveal a nontrivial
            square root of 1 modulo $n$.  
            (This is why the Miller-Rabin test
            cannot be fooled.)  Modify the 
            <kbd>expmod</kbd> 
            function 
            to signal if it
            discovers a nontrivial square root of 1, and use this to implement
            the Miller-Rabin test with a 
            function 
            analogous to 
            <kbd>fermat_test</kbd>.
            Check your
            function 
            by testing various known primes and non-primes.
            Hint: One convenient way to make <kbd>expmod</kbd>
            signal is to have it return 0.
            
            

        
        
        </EXERCISE>
      <hr>
<div class="footnote">
<a class="footnote-number" id="footnote-1" href="17#footnote-link-1">[1] </a><FOOTNOTE>If 
            $d$ is a divisor of 
            $n$, then so is 
            $n/d$.
            But $d$ and 
            $n/d$ cannot both be greater than 
            $\sqrt{n}$.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-2" href="17#footnote-link-2">[2] </a><FOOTNOTE>Pierre de Fermat (1601–1665) is 
            considered to be the founder of
            
            
            modern number theory.  He obtained many important number-theoretic
            results, but he usually announced just the results, without providing
            his proofs.  
            
            Fermat's Little Theorem was stated in a letter he wrote in
            1640.  The first published proof was given by 
            
            Euler in 1736 (and an
            
            earlier, identical proof was discovered in the unpublished manuscripts
            of Leibniz).  The most famous of Fermat's results—known as Fermat's
            Last Theorem—was jotted down in 1637 in his copy of the book 
            <EM>Arithmetic</EM> (by the third-century Greek mathematician 
            
            Diophantus) with the
            remark <QUOTE>I have discovered a truly remarkable proof, but this margin is
              too small to contain it.</QUOTE>  Finding a proof of Fermat's Last Theorem
            became one of the most famous challenges in number theory.  A complete
            
            solution was finally given in 1995 by Andrew Wiles of Princeton University.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-3" href="17#footnote-link-3">[3] </a><FOOTNOTE>The reduction steps in the cases where the exponent
                $e$ is greater than 1 are based on the fact that, for any integers
                $x$, $y$, and $m$, we can find the remainder of $x$ times $y$ modulo
                $m$ by computing separately the remainders of $x$ modulo $m$ and $y$
                modulo $m$, multiplying these, and then taking the remainder of the
                result modulo $m$.  For instance, in the case where $e$ is even, we
                compute the remainder of $b^{e/2}$ modulo $m$, square this, and take
                the remainder modulo $m$.  This technique is useful because it means
                we can perform our computation without ever having to deal with
                numbers much larger than $m$.  (Compare
                Exercise <REF NAME="ex:Alyssas-expmod"></REF>.)</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-4" href="17#footnote-link-4">[4] </a><FOOTNOTE>Numbers that fool the
            
            Fermat test are called <EM>Carmichael numbers</EM>, and little is known
            about them other than that they are extremely rare.  There are 255
            Carmichael numbers below 100,000,000.  The smallest few are 561, 1105,
            1729, 2465, 2821, and 6601.  In testing primality of very large
            numbers chosen at random, the chance of stumbling upon a value that
            fools the Fermat test is less than the chance that 
            
            cosmic radiation
            will cause the computer to make an error in carrying out a <QUOTE>correct</QUOTE>
            algorithm.  Considering an algorithm to be inadequate for the first
            reason but not for the second illustrates the difference between
            
            
            mathematics and engineering.
            </FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-5" href="17#footnote-link-5">[5] </a><FOOTNOTE>One of the most striking applications of
            
            probabilistic prime testing has been to the field of cryptography.
            Although it is now computationally infeasible to factor an arbitrary
            200-digit number, the primality of such a number can be checked in a
            few seconds with the Fermat test.  This fact forms the basis of a
            technique for constructing <QUOTE>unbreakable codes</QUOTE> suggested by 
            
            Rivest,
            
            Shamir, and 
            
            Adleman (1977).  The resulting 
            
            <EM>RSA algorithm</EM> has
            become a widely used technique for enhancing the security of
            electronic communications.  Because of this and related developments,
            the study of 
            
            prime numbers, once considered the epitome of a topic in
            <QUOTE>pure</QUOTE> mathematics to be studied only for its own sake, now turns
            out to have important practical applications to cryptography,
            electronic funds transfer, and information retrieval.</FOOTNOTE>
</div></SUBSECTION></div>
    </div>

    <div class="nav">
    <!--
      <div type="button" class="btn btn-secondary">
        <a href="http://localhost:3000/chapters/16">&lt; Previous</a>
    </div>
    -->
      <div type="button" class="btn btn-secondary">
        <a class="scroll-next" href="18">Next &gt;</a>
      </div>


  </div>
  <script>
//<![CDATA[
var chapter_id = 17;
//]]>
</script>
  <div class="next-page"></div>
</div>

     </div><!-- /.container -->

     <!--<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>
     -->
   </body>
</html>
